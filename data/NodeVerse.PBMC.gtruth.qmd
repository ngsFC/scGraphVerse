---
title: "NodeVerse PBMC Data and Ground Truth"
author: "Francesco Cecere"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: superhero
  execute:
   echo: true
   warning: false
   error: true
editor: visual
---

## Load Libraries

```{r load-libraries}
setwd("/home/francescoc/Desktop/GRN_project/data")

library(tidyverse)
library(biomaRt)
library(igraph)
library(learn2count)
library(ggraph)
library(Seurat)

source("./../R/download_Atlas.R")
source("./../R/pathg.R")
source("./../R/BioGRID_Adj.R")
```

## Load BioGRID Data

```{r}
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)

biogrid_data <- biogrid_data[, c("Official.Symbol.Interactor.A", 
                                 "Official.Symbol.Interactor.B", 
                                 "Score",
                                 "Experimental.System.Type",
                                 "Organism.Name.Interactor.A",
                                 "Organism.Name.Interactor.B")]
names(biogrid_data) <- c("Interactor_A", "Interactor_B", "Score", "type", "org1", "org2")

biogrid_data <- biogrid_data %>%
  mutate(Score = as.numeric(Score)) %>%
  filter(type == "physical") %>%       
  filter(!is.na(Score)) %>%            
  filter(abs(Score) > 300) %>%
  filter(org1 == "Homo sapiens" & org2 == "Homo sapiens")

write.table(biogrid_data, "biogrid_physical_s300.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
```

## Load Atlas Data

```{r}
options(timeout = 600)

# PBMC Dataset: Local and systemic responses to SARS-CoV-2 infection in children and adults
seurat_url <- "https://datasets.cellxgene.cziscience.com/89619149-162f-4839-8e97-24735924417c.rds"

seurat_object <- download_Atlas(seurat_url)

seurat_subset <- subset(
  x = seurat_object,
  subset = disease == "normal" & cell_type == "CD4-positive helper T cell" & donor_id %in% c("AN6", "AN9", "NP18")
)

```

```{r}
# Extract the meta.features dataframe
meta_features <- seurat_subset[["RNA"]]@meta.features

# Ensure the rownames of meta.features match the rownames of the data
stopifnot(all(rownames(meta_features) == rownames(seurat_subset[["RNA"]]@data)))

# Get the 'name' column to use as new rownames
new_rownames <- meta_features$name

# Define the new rownames
new_rownames <- seurat_subset@assays$RNA@meta.features$name

# Ensure that the length of new_rownames matches the current features
if (length(new_rownames) != nrow(seurat_subset[["RNA"]]@data)) {
  stop("The length of new_rownames does not match the number of features.")
}
# Update all relevant components together
assay <- seurat_subset[["RNA"]] # Access the RNA assay
rownames(assay@counts) <- new_rownames
rownames(assay@data) <- new_rownames
rownames(assay@meta.features) <- new_rownames

# Assign the updated assay back to the Seurat object
seurat_subset[["RNA"]] <- assay

```

## Split data for donor_id

```{r}
seurat_split <- SplitObject(
  object = seurat_subset,
  split.by = "donor_id"
)

expression_matrices <- lapply(seurat_split, function(obj) {
  GetAssayData(obj, assay = "RNA", layer = "counts") # Use `layer` instead of `slot`
})

names(expression_matrices) <- names(seurat_split)

str(expression_matrices)
saveRDS(expression_matrices, "PBMC.top1000.RDS")

```

## Adjacency matrix


```{r}

pathgenes <- pathg(seurat_object = seurat_subset, cell_type = "CD4-positive helper T cell", top_n = 1000)

result <- BioGRID_Adj(pathgenes, biogrid_data)
wadjm <- result$weighted
adjm <- result$binary

common_names <- intersect(rownames(adjm), colnames(adjm))
adjm <- adjm[common_names, common_names, drop = FALSE]

print(dim(wadjm))
print(dim(adjm))

write.table(adjm, "./../analysis/adjm_p677.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
write.table(wadjm, "./../analysis/wadjm_p677.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)

```

## Create Ground Truth Network

```{r}
gtruth <- igraph::graph_from_adjacency_matrix(adjm, mode = "undirected", diag = FALSE)

num_nodes <- vcount(gtruth)
num_edges <- ecount(gtruth)

set.seed(1234)

p1 <- ggraph(gtruth, layout = "fr") + 
  geom_edge_link(color = "gray", width = 0.5) +  # Set edge color and width
  geom_node_point(color = "steelblue", size = 0.7) +  # Set node color and size
  labs(title = paste("Ground Truth\nNodes:", vcount(gtruth), "Edges:", ecount(gtruth))) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
  )

p1

ggsave("./../analysis/gtruth_top1000_s300.png", p1, width = 8, height = 6, dpi = 300, bg = "white")
```

## Simulate n500 p677 matrices


```{r}
ncell <- 500
nodes <- nrow(adjm)

set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)

count_matrices <- lapply(1:3, function(i) {
  set.seed(1130 + i)
  mu_i <- mu_values[i]
  theta_i <- theta_values[i]
  
  count_matrix_i <- learn2count::simdata(n = ncell, p = nodes, B = adjm, family = "ZINB", 
                            mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
  
  count_matrix_df <- as.data.frame(count_matrix_i)
  colnames(count_matrix_df) <- colnames(adjm)
  rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
  
  return(count_matrix_df)
})

# Optionally save the results
saveRDS(count_matrices, "./../analysis/sim_n500p677.RDS")

```

