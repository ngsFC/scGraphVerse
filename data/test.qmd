---
title: "NodeVerse Simulations and Performace"
author: "Francesco Cecere"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true  # Collapse code blocks
    toc: true        # Table of contents
    toc-depth: 2     # Depth of TOC headings
    toc-location: left
    number-sections: true
    theme: minty # Use a predefined theme
    smooth-scroll: true  # Enable smooth scrolling
    code-summary: "Show the Code"  # Custom label for code folding
    highlight-style: github # Syntax highlighting style
    link-external-newwindow: true  # Open external links in a new window
editor: visual
execute:
  warning: false  # Suppress warnings globally
  message: false  # Suppress package messages globally
  error: false    # Prevent the document from halting on errors
---

## Load Libraries and data

```{r}
library(RColorBrewer)
library(DT)
library(tidyverse)
library(NodeVerse)

reticulate::use_python("/usr/bin/python3", required = TRUE)
arboreto <- reticulate::import("arboreto.algo")
pandas <- reticulate::import("pandas")
numpy <- reticulate::import("numpy")

time <- list()

biogrid_data <- read.table("/home/francescoc/Desktop/NodeVerse/data/biogrid_physical_s300.txt", sep = "\t")
adjm <- generate_adjacency(list(biogrid_data))
adjm <- symmetrize(adjm, weight_function = "mean")
adjm <- as.matrix(adjm[[1]])
adjm[adjm > 0] <- 1

count_matrices <- readRDS("./../data/PBMC.top1000.RDS")
```

```{r}
crop_to_50x50 <- function(mat) {
  mat[1:200, 1:200]   # Take the first 50 rows and columns
}

count_matrices <- lapply(count_matrices, crop_to_50x50)
count_matrices <- lapply(count_matrices, function(mat) {
  mat[, order(colnames(mat))]
})
genes_expr <- colnames(count_matrices[[1]])
adj <- matrix(0, 
                  nrow = length(genes_expr), 
                  ncol = length(genes_expr),
                  dimnames = list(genes_expr, genes_expr))

common_genes <- intersect(genes_expr, rownames(adjm))
ordered_common_genes <- genes_expr[genes_expr %in% common_genes]

if (length(ordered_common_genes) > 0) {
  adj[ordered_common_genes, ordered_common_genes] <- adjm[ordered_common_genes, ordered_common_genes]
}

```

## GENIE3

### Late integration

```{r}
set.seed(1234)
time[["GENIE3_late_15Cores"]] <- system.time(
  genie3_late <- infer_networks(count_matrices, 
                                method="GENIE3",
                                nCores = 15)
)

#saveRDS(genie3_late, paste(ddir, "genie3_late_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
genie3_late_wadj <- generate_adjacency(genie3_late)
sgenie3_late_wadj <- symmetrize(genie3_late_wadj, weight_function = "mean")

#genie3_late_auc <- plotROC(sgenie3_late_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration")

```

#### Cutoff

```{r}
sgenie3_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
                                     weighted_adjm_list = sgenie3_late_wadj, 
                                     n = 3,
                                     method = "GENIE3",
                                     nCores = 15)

#scores.genie3.late.all <- pscores(adjm, sgenie3_late_adj)
plots <- plotg(sgenie3_late_adj)

#cbind(scores.genie3.late.all$Statistics, genie3_late_auc) %>% write.table(., paste(ddir, "genie3_late_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Consensus

```{r}
consesusm <- create_consensus(sgenie3_late_adj, method="vote")
consesusu <- create_consensus(sgenie3_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgenie3_late_adj, weighted_list = sgenie3_late_wadj, method = "INet", threshold = 0.05, ncores = 15)

plotg(list(consesusm))
plotg(list(consesusu))
plotg(list(consesunet))

#scores.genie3.late <- pscores(adjm, list(consesusm))
#scoresu.genie3.late <- pscores(adjm, list(consesusu))
#scoresnet.genie3.late <- pscores(adjm, list(consesunet))

```

#### Plot comparison

```{r}
plotg(list(adj))

ajm_compared <- compare_consensus(consesusm, adj)
ajm_compared <- compare_consensus(consesusu, adj)
ajm_compared <- compare_consensus(consesunet, adj)

```

#### PubMed Query

```{r}
query <- edge_mining(list(consesusm), adj, query_edge_types = "TP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "TP PubMed query")

query <- edge_mining(list(consesusm), adj, query_edge_types = "FP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FP PubMed query")

query <- edge_mining(list(consesusm), adj, query_edge_types = "FN")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FN PubMed query")
```

### Early integration

```{r}
early_matrix <- list(earlyj(count_matrices))

set.seed(1234)
time[["GENIE3_early_15Cores"]] <- system.time(
  genie3_early <- infer_networks(early_matrix, method="GENIE3", nCores = 15)
)

#saveRDS(genie3_early, paste(ddir, "genie3_early_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
genie3_early_wadj <- generate_adjacency(genie3_early)
sgenie3_early_wadj <- symmetrize(genie3_early_wadj, weight_function = "mean")
#genie3_early_auc <- plotROC(sgenie3_early_wadj, adjm, plot_title = "ROC curve - GENIE3 Early Integration")

```

#### Cutoff

```{r}
sgenie3_early_adj <- cutoff_adjacency(count_matrices = early_matrix,
                                      weighted_adjm_list = sgenie3_early_wadj, 
                                      n = 2,
                                      method = "GENIE3",
                                      nCores = 15)

#scores.genie3.early <- pscores(adjm, sgenie3_early_adj)
plots <- plotg(sgenie3_early_adj)


#cbind(scores.genie3.early$Statistics, genie3_early_auc) %>% write.table(., paste(ddir, "genie3_early_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(sgenie3_early_adj[[1]], adjm)

```

#### PubMed Query

```{r}
query <- edge_mining(sgenie3_early_adj, adj, query_edge_types = "TP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "TP PubMed query")

query <- edge_mining(sgenie3_early_adj, adj, query_edge_types = "FP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FP PubMed query")

query <- edge_mining(sgenie3_early_adj, adj, query_edge_types = "FN")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FN PubMed query")
```

## GRNBoost2

### Late integration

```{r}
set.seed(1234)
time[["grnboost_late"]] <- system.time(
  grnboost_late <- infer_networks(count_matrices, 
                                method="GRNBoost2",
                                nCores = 15)
)

#saveRDS(grnboost_late, paste(ddir, "grnboost_late_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
grnboost_late_wadj <- generate_adjacency(grnboost_late)
sgrnboost_late_wadj <- symmetrize(grnboost_late_wadj, weight_function = "mean")
#grnboost_late_auc <- plotROC(sgrnboost_late_wadj, adjm, plot_title = "ROC curve - grnboost Late Integration")

```

#### Cutoff

```{r}
sgrnboost_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
                                     weighted_adjm_list = sgrnboost_late_wadj, 
                                     n = 3,
                                     method = "GRNBoost2",
                                     nCores = 15)

#scores.grnboost.late.all <- pscores(adjm, sgrnboost_late_adj)
plots <- plotg(sgrnboost_late_adj)

#cbind(scores.grnboost.late.all$Statistics, grnboost_late_auc) %>% write.table(., paste(ddir, "grnboost_late_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Consensus

```{r}
consesusm <- create_consensus(sgrnboost_late_adj, method="vote")
consesusu <- create_consensus(sgrnboost_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgrnboost_late_adj, weighted_list = sgrnboost_late_wadj, method = "INet", threshold = 0.05)

#scores.grnboost.late <- pscores(adjm, list(consesusm))
#scoresu.grnboost.late <- pscores(adjm, list(consesusu))
#scoresnet.grnboost.late <- pscores(adjm, list(consesunet))


```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(consesusm, adjm)
ajm_compared <- compare_consensus(consesusu, adjm)
ajm_compared <- compare_consensus(consesunet, adjm)

```

#### PubMed Query

```{r}
query <- edge_mining(list(consesusm), adj, query_edge_types = "TP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "TP PubMed query")

query <- edge_mining(list(consesusm), adj, query_edge_types = "FP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FP PubMed query")

query <- edge_mining(list(consesusm), adj, query_edge_types = "FN")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FN PubMed query")
```

### Early integration

```{r}
early_matrix <- list(earlyj(count_matrices))

set.seed(1234)
time[["grnboost_early"]] <- system.time(
  grnboost_early <- infer_networks(early_matrix, method="GRNBoost2")
)

#saveRDS(grnboost_early, paste(ddir, "grnboost_early_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
grnboost_early_wadj <- generate_adjacency(grnboost_early)
sgrnboost_early_wadj <- symmetrize(grnboost_early_wadj, weight_function = "mean")
#grnboost_early_auc <- plotROC(sgrnboost_early_wadj, adjm, plot_title = "ROC curve - grnboost Early Integration")

```

#### Cutoff

```{r}
sgrnboost_early_adj <- cutoff_adjacency(count_matrices = early_matrix,
                                      weighted_adjm_list = sgrnboost_early_wadj, 
                                      n = 2,
                                      method = "GRNBoost2",
                                      nCores = 15)

#scores.grnboost.early <- pscores(adjm, sgrnboost_early_adj)
plots <- plotg(sgrnboost_early_adj)

#cbind(scores.grnboost.early$Statistics, grnboost_early_auc) %>% write.table(., paste(ddir, "grnboost_early_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(sgrnboost_early_adj[[1]], adjm)
```

#### PubMed Query

```{r}
query <- edge_mining(sgrnboost_early_adj, adj, query_edge_types = "TP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "TP PubMed query")

query <- edge_mining(sgrnboost_early_adj, adj, query_edge_types = "FP")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FP PubMed query")

query <- edge_mining(sgrnboost_early_adj, adj, query_edge_types = "FN")

query[[1]] %>%
    datatable(extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('csv', 'excel'),
              scrollX = TRUE,
              pageLength = 10), 
            caption = "FN PubMed query")
```
