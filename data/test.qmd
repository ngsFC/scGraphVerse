---
title: "NodeVerse Simulations and Performace"
author: "Francesco Cecere"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true  # Collapse code blocks
    toc: true        # Table of contents
    toc-depth: 2     # Depth of TOC headings
    toc-location: left
    number-sections: true
    theme: minty # Use a predefined theme
    smooth-scroll: true  # Enable smooth scrolling
    code-summary: "Show the Code"  # Custom label for code folding
    highlight-style: github # Syntax highlighting style
    link-external-newwindow: true  # Open external links in a new window
editor: visual
execute:
  warning: false  # Suppress warnings globally
  message: false  # Suppress package messages globally
  error: false    # Prevent the document from halting on errors
---

## Load Libraries and data

```{r}
library(RColorBrewer)
library(DT)
library(NodeVerse)

reticulate::use_python("/usr/bin/python3", required = TRUE)
arboreto <- reticulate::import("arboreto.algo")
pandas <- reticulate::import("pandas")
numpy <- reticulate::import("numpy")

time <- list()

ddir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/data"
pdir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/plots"

adjm <- as.matrix(read.table("./../analysis/adjm_p677.txt"))
count_matrices <- readRDS("./../data/PBMC.top1000.RDS")
dim(count_matrices[[1]])
count_matrices[[1]] <- as.matrix(count_matrices[[1]])
count_matrices[[2]] <- as.matrix(count_matrices[[2]])
count_matrices[[3]] <- as.matrix(count_matrices[[3]])

```

## GENIE3

### Late integration

```{r}
set.seed(1234)
time[["GENIE3_late_15Cores"]] <- system.time(
  genie3_late <- infer_networks(count_matrices, 
                                method="GENIE3",
                                nCores = 15)
)

saveRDS(genie3_late, paste(ddir, "genie3_late_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
genie3_late_wadj <- generate_adjacency(genie3_late, ground.truth = adjm)
sgenie3_late_wadj <- symmetrize(genie3_late_wadj, weight_function = "mean")

genie3_late_auc <- plotROC(sgenie3_late_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration")

```

#### Cutoff

```{r}
sgenie3_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
                                     weighted_adjm_list = sgenie3_late_wadj, 
                                     ground.truth = adjm,
                                     n = 3,
                                     method = "GENIE3",
                                     nCores = 15)

scores.genie3.late.all <- pscores(adjm, sgenie3_late_adj)
plots <- plotg(sgenie3_late_adj)

cbind(scores.genie3.late.all$Statistics, genie3_late_auc) %>% write.table(., paste(ddir, "genie3_late_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Consensus

```{r}
consesusm <- create_consensus(sgenie3_late_adj, method="vote")
consesusu <- create_consensus(sgenie3_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgenie3_late_adj, weighted_list = sgenie3_late_wadj, method = "INet", threshold = 0.05, ncores = 15)

scores.genie3.late <- pscores(adjm, list(consesusm))
scoresu.genie3.late <- pscores(adjm, list(consesusu))
scoresnet.genie3.late <- pscores(adjm, list(consesunet))

```

#### Plot comparison

```{r}
source("/home/francescoc/Desktop/NodeVerse/R/compare_consensus.R")
ajm_compared <- compare_consensus(consesusm, adjm)
ajm_compared <- compare_consensus(consesusu, adjm)
ajm_compared <- compare_consensus(consesunet, adjm)

```

### Early integration

```{r}
early_matrix <- list(earlyj(count_matrices))

set.seed(1234)
time[["GENIE3_early_15Cores"]] <- system.time(
  genie3_early <- infer_networks(early_matrix, method="GENIE3", nCores = 15)
)

saveRDS(genie3_early, paste(ddir, "genie3_early_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
genie3_early_wadj <- generate_adjacency(genie3_early, ground.truth = adjm)
sgenie3_early_wadj <- symmetrize(genie3_early_wadj, weight_function = "mean")
genie3_early_auc <- plotROC(sgenie3_early_wadj, adjm, plot_title = "ROC curve - GENIE3 Early Integration")

```

#### Cutoff

```{r}
sgenie3_early_adj <- cutoff_adjacency(count_matrices = early_matrix,
                                      weighted_adjm_list = sgenie3_early_wadj, 
                                      ground.truth = adjm,
                                      n = 2,
                                      method = "GENIE3",
                                      nCores = 15)

scores.genie3.early <- pscores(adjm, sgenie3_early_adj)
plots <- plotg(sgenie3_early_adj)


cbind(scores.genie3.early$Statistics, genie3_early_auc) %>% write.table(., paste(ddir, "genie3_early_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(sgenie3_early_adj[[1]], adjm)

```

## GRNBoost2

### Late integration

```{r}
set.seed(1234)
time[["grnboost_late"]] <- system.time(
  grnboost_late <- infer_networks(count_matrices, 
                                method="GRNBoost2",
                                nCores = 15)
)

saveRDS(grnboost_late, paste(ddir, "grnboost_late_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
grnboost_late_wadj <- generate_adjacency(grnboost_late, ground.truth = adjm)
sgrnboost_late_wadj <- symmetrize(grnboost_late_wadj, weight_function = "mean")
grnboost_late_auc <- plotROC(sgrnboost_late_wadj, adjm, plot_title = "ROC curve - grnboost Late Integration")

```

#### Cutoff

```{r}
sgrnboost_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
                                     weighted_adjm_list = sgrnboost_late_wadj, 
                                     ground.truth = adjm,
                                     n = 3,
                                     method = "GRNBoost2",
                                     nCores = 15)

scores.grnboost.late.all <- pscores(adjm, sgrnboost_late_adj)
plots <- plotg(sgrnboost_late_adj)

cbind(scores.grnboost.late.all$Statistics, grnboost_late_auc) %>% write.table(., paste(ddir, "grnboost_late_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Consensus

```{r}
consesusm <- create_consensus(sgrnboost_late_adj, method="vote")
consesusu <- create_consensus(sgrnboost_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgrnboost_late_adj, weighted_list = sgrnboost_late_wadj, method = "INet", threshold = 0.05)

scores.grnboost.late <- pscores(adjm, list(consesusm))
scoresu.grnboost.late <- pscores(adjm, list(consesusu))
scoresnet.grnboost.late <- pscores(adjm, list(consesunet))


```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(consesusm, adjm)
ajm_compared <- compare_consensus(consesusu, adjm)
ajm_compared <- compare_consensus(consesunet, adjm)


```

### Early integration

```{r}
early_matrix <- list(earlyj(count_matrices))

set.seed(1234)
time[["grnboost_early"]] <- system.time(
  grnboost_early <- infer_networks(early_matrix, method="GRNBoost2")
)

saveRDS(grnboost_early, paste(ddir, "grnboost_early_pbmc1000.RDS", sep = "/"))
```

#### Symmetrize and ROC

```{r}
grnboost_early_wadj <- generate_adjacency(grnboost_early, ground.truth = adjm)
sgrnboost_early_wadj <- symmetrize(grnboost_early_wadj, weight_function = "mean")
grnboost_early_auc <- plotROC(sgrnboost_early_wadj, adjm, plot_title = "ROC curve - grnboost Early Integration")

```

#### Cutoff

```{r}
sgrnboost_early_adj <- cutoff_adjacency(count_matrices = early_matrix,
                                      weighted_adjm_list = sgrnboost_early_wadj, 
                                      ground.truth = adjm,
                                      n = 2,
                                      method = "GRNBoost2",
                                      nCores = 15)

scores.grnboost.early <- pscores(adjm, sgrnboost_early_adj)
plots <- plotg(sgrnboost_early_adj)

cbind(scores.grnboost.early$Statistics, grnboost_early_auc) %>% write.table(., paste(ddir, "grnboost_early_pbmc1000_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
```

#### Plot comparison

```{r}
ajm_compared <- compare_consensus(sgrnboost_early_adj[[1]], adjm)

```
