buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
late_wadj <- generate_adjacency(late)
slate_wadj <- symmetrize(late_wadj, weight_function = "mean")
late_auc <- plotROC(slate_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration", is_binary = F)
slate_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = slate_wadj,
n = 3,
method = "GENIE3",
nCores = 15)
scores.late.all <- pscores(adjm, slate_adj)
plotg(slate_adj)
keepscores <- scores.late.all$Statistics %>% mutate(Predicted_Matrix=c("vote", "union", "inet"), Method=c("GENIE3"), Ratio=nrow(adjm)/ncol(count_matrices[[1]]), p=nrow(adjm))
seq_along(count_matrices)
compare_consensus(consensus_matrix = slate_adj, reference_matrix = adjm, false_plot = F)
compare_consensus(consensus_matrix = slate_adj[[1]], reference_matrix = adjm, false_plot = F)
comm_consesusm <- community_path(slate_adj)
adj_comm <- community_path(adjm)
comm_consesusm <- community_path(slate_adj[[1]])
community_similarity(adj_comm,list(comm_consesusm, comm_consesusu, comm_consesunet))
community_similarity(adj_comm,slate_adj)
community_similarity(adj_comm,slate_adj)
community_similarity(adj_comm,slate_adj[[1]])
community_similarity(adj_comm,list(comm_consesusm))
seq_along(count_matrices)
compare_consensus(consensus_matrix = slate_adj, reference_matrix = adjm, false_plot = F)
compare_consensus(consensus_matrix = slate_adj[[1]], reference_matrix = adjm, false_plot = F)
length(seq_along(count_matrices))
count_matrices <- readRDS("./../analysis/simulation/simdata/sim_n100p500k5.RDS")
count_matrices <- lapply(count_matrices, t)
count_matrices <- count_matrices[1:2]
length(seq_along(count_matrices))
knitr::opts_knit$set(root.dir = "/home/francescoc/Desktop/scGraphVerse/data/",message=FALSE, warning=FALSE)
#library(RColorBrewer)
library(DT)
library(tidyverse)
#library(Seurat)
#library(STRINGdb)
#library(SingleCellExperiment)
library(scGraphVerse)
#library(BiocParallel)
#library(GENIE3)
#library(fmsb)
reticulate::use_python("/usr/bin/python3", required = TRUE)
arboreto <- reticulate::import("arboreto.algo")
pandas <- reticulate::import("pandas")
numpy <- reticulate::import("numpy")
time <- list()
ddir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/"
pdir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/plot/"
adjm <- as.matrix(read.table("./../analysis/simulation/adjacency/adjm_top1200_p500.txt"))
colnames(adjm) <- rownames(adjm)
as.data.frame(adjm) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Ground Truth")
count_matrices <- readRDS("./../analysis/simulation/simdata/sim_n100p500k5.RDS")
dim(count_matrices[[1]])
count_matrices <- lapply(count_matrices, t)
as.data.frame(count_matrices[[1]]) %>%
slice_head(n=10) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Simulated Count matrix")
count_matrices <- count_matrices[1]
set.seed(1234)
time[["GENIE3_late_15Cores"]] <- system.time(
late <- infer_networks(count_matrices,
method="GENIE3",
nCores = 15)
)
late[[1]] %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
late_wadj <- generate_adjacency(late)
slate_wadj <- symmetrize(late_wadj, weight_function = "mean")
as.data.frame(slate_wadj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 symmetric weighted adjacency")
late_auc <- plotROC(slate_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration", is_binary = F)
slate_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = slate_wadj,
n = 3,
method = "GENIE3",
nCores = 15)
as.data.frame(slate_adj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 symmetric adjacency")
scores.late.all <- pscores(adjm, slate_adj)
scores.late.all$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores late")
keepscores <- scores.late.all$Statistics %>% mutate(Predicted_Matrix=c("early"), Method=c("GENIE3"), Ratio=nrow(adjm)/ncol(count_matrices[[1]]), p=nrow(adjm), k=seq_along(count_matrices))
plotg(slate_adj)
compare_consensus(consensus_matrix = slate_adj[[1]], reference_matrix = adjm, false_plot = F)
adj_comm <- community_path(adjm)
comm_consesusm <- community_path(slate_adj[[1]])
community_similarity(adj_comm,list(comm_consesusm))
set.seed(1234)
time[["GRNBoost2_late"]] <- system.time(
late <- infer_networks(count_matrices,
method="GRNBoost2",
nCores = 15)
)
as.data.frame(late[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 late output")
late_wadj <- generate_adjacency(late)
slate_wadj <- symmetrize(late_wadj, weight_function = "mean")
as.data.frame(slate_wadj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 symmetric weighted adjacency")
late_auc <- plotROC(slate_wadj, adjm, plot_title = "ROC curve - grnboost Late Integration")
slate_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = slate_wadj,
n = 3,
method = "GRNBoost2",
nCores = 15)
as.data.frame(slate_adj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 symmetric adjacency")
scores.late.all <- pscores(adjm, slate_adj)
scores.late.all$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores late")
keepscores <- scores.late.all$Statistics %>% mutate(Predicted_Matrix=c("early"), Method=c("GRNBoost2"), Ratio=nrow(adjm)/ncol(count_matrices[[1]]), p=nrow(adjm), k=length(seq_along(count_matrices))) %>%
full_join(keepscores)
plotg(slate_adj)
compare_consensus(consensus_matrix = slate_adj[[1]], reference_matrix = adjm, false_plot = F)
comm_consesusm <- community_path(slate_adj[[1]])
community_similarity(adj_comm,list(comm_consesusm))
#https://cran.r-project.org/src/contrib/Archive/JRF/
#install.packages("/home/francescoc/Downloads/JRF_0.1-4.tar.gz", repos = NULL, type = "source")
set.seed(1234)
time[["JRF_15Cores"]] <- system.time(
jrf_mat <- infer_networks(count_matrices, method="JRF", nCores = 15)
)
as.data.frame(jrf_mat[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "JRF output")
jrf_list <- list()
importance_columns <- grep("importance", names(jrf_mat[[1]]), value = TRUE)
for (i in seq_along(importance_columns)) {
# Select the 'gene1', 'gene2', and the current 'importance' column
df <- jrf_mat[[1]][, c("gene1", "gene2", importance_columns[i])]
# Rename the importance column to its original name (e.g., importance1, importance2, etc.)
names(df)[3] <- importance_columns[i]
# Add the data frame to the output list
jrf_list[[i]] <- df
}
saveRDS(jrf_list, "./../analysis/jrf.RDS")
as.data.frame(jrf_list[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "JRF output")
jrf_wadj <- generate_adjacency(jrf_list)
sjrf_wadj <- symmetrize(jrf_wadj, weight_function = "mean")
jrf_auc_mine <- plotROC(sjrf_wadj, adjm, plot_title = "ROC curve - JRF Late Integration", is_binary = F)
as.data.frame(sjrf_wadj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "JRF symmetrize output")
sjrf_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = sjrf_wadj,
n = 3,
method = "JRF")
as.data.frame(sjrf_adj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "JRF adjacency")
scores.jrf.all <- pscores(adjm, sjrf_adj)
scores.jrf.all$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores")
keepscores <- scores.jrf.all$Statistics %>% mutate(Predicted_Matrix=c("early"), Method=c("JRF"), Ratio=nrow(adjm)/ncol(count_matrices[[1]]), p=nrow(adjm), k=length(seq_along(count_matrices))) %>%
full_join(keepscores)
plotg(sjrf_adj)
compare_consensus(consensus_matrix = sjrf_adj[[1]], reference_matrix = adjm, false_plot = F)
comm_consesusm <- community_path(sjrf_adj[[1]])
community_similarity(adj_comm,list(comm_consesusm))
time_data <- data.frame(
Method = names(time),
Time_in_Seconds = sapply(time, function(x) if ("elapsed" %in% names(x)) x["elapsed"] else NA)
) %>%
mutate(
Time_in_Minutes = Time_in_Seconds / 60,
Time_in_Hours = Time_in_Seconds / 3600,
Ratio = nrow(adjm) / ncol(count_matrices[[1]]),
p = nrow(adjm)
) %>%
arrange(Time_in_Hours) %>%
mutate(Method = factor(Method, levels = Method)) %>%
separate(Method, into = c("Method", "Predicted_Matrix", "Cores"), sep = "_", fill = "right") %>%
mutate(
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix),
Cores = case_when(
Method %in% c("JRF", "GRNBoost2") ~ "15Cores",
TRUE ~ Cores
)
)
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "joint",
Predicted_Matrix == "early" ~ "early",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "late",
TRUE ~ Predicted_Matrix
)
)
df1_unique <- time_data %>%
dplyr::select(Method, Predicted_Matrix, Time_in_Seconds, Time_in_Minutes, Time_in_Hours) %>%
distinct()
df2 <- df2 %>%
left_join(df1_unique, by = c("Method", "Predicted_Matrix_Mapped" = "Predicted_Matrix")) %>%
dplyr::select(-Predicted_Matrix_Mapped)
write.table(df2, file.path(ddir, "met_n100_p500_k1.txt"), quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
View(df2)
time_data <- data.frame(
Method = names(time),
Time_in_Seconds = sapply(time, function(x) if ("elapsed" %in% names(x)) x["elapsed"] else NA)
) %>%
mutate(
Time_in_Minutes = Time_in_Seconds / 60,
Time_in_Hours = Time_in_Seconds / 3600,
Ratio = nrow(adjm) / ncol(count_matrices[[1]]),
p = nrow(adjm)
) %>%
arrange(Time_in_Hours) %>%
mutate(Method = factor(Method, levels = Method)) %>%
separate(Method, into = c("Method", "Predicted_Matrix", "Cores"), sep = "_", fill = "right") %>%
mutate(
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix),
Cores = case_when(
Method %in% c("JRF", "GRNBoost2") ~ "15Cores",
TRUE ~ Cores
)
)
time_data
keepscores
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "joint",
Predicted_Matrix == "early" ~ "early",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "late",
TRUE ~ Predicted_Matrix
)
)
df1_unique <- time_data %>%
dplyr::select(Method, Predicted_Matrix, Time_in_Seconds, Time_in_Minutes, Time_in_Hours) %>%
distinct()
df1_unique
df2
df2
df1_unique <- time_data %>%
dplyr::select(Method, Predicted_Matrix, Time_in_Seconds, Time_in_Minutes, Time_in_Hours) %>%
distinct()
df2 <- df2 %>%
left_join(df1_unique, by = c("Method", "Predicted_Matrix" = "Predicted_Matrix")) %>%
dplyr::select(-Predicted_Matrix_Mapped)
df2
time_data <- data.frame(
Method = names(time),
Time_in_Seconds = sapply(time, function(x) if ("elapsed" %in% names(x)) x["elapsed"] else NA)
) %>%
mutate(
Time_in_Minutes = Time_in_Seconds / 60,
Time_in_Hours = Time_in_Seconds / 3600,
Ratio = nrow(adjm) / ncol(count_matrices[[1]]),
p = nrow(adjm)
) %>%
arrange(Time_in_Hours) %>%
mutate(Method = factor(Method, levels = Method)) %>%
separate(Method, into = c("Method", "Predicted_Matrix", "Cores"), sep = "_", fill = "right") %>%
mutate(
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix),
Cores = case_when(
Method %in% c("JRF", "GRNBoost2") ~ "15Cores",
TRUE ~ Cores
)
)
time_dataù
time_data
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "early",
Predicted_Matrix == "early" ~ "early",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "early",
TRUE ~ Predicted_Matrix
)
)
df1_unique <- time_data %>%
dplyr::select(Method, Predicted_Matrix, Time_in_Seconds, Time_in_Minutes, Time_in_Hours) %>%
distinct()
df2 <- df2 %>%
left_join(df1_unique, by = c("Method", "Predicted_Matrix_Mapped" = "Predicted_Matrix")) %>%
dplyr::select(-Predicted_Matrix_Mapped)
df2
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "early",
Predicted_Matrix == "early" ~ "early",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "early",
TRUE ~ Predicted_Matrix
)
)
df2
df1_unique
time_data <- data.frame(
Method = names(time),
Time_in_Seconds = sapply(time, function(x) if ("elapsed" %in% names(x)) x["elapsed"] else NA)
) %>%
mutate(
Time_in_Minutes = Time_in_Seconds / 60,
Time_in_Hours = Time_in_Seconds / 3600,
Ratio = nrow(adjm) / ncol(count_matrices[[1]]),
p = nrow(adjm)
) %>%
arrange(Time_in_Hours) %>%
mutate(Method = factor(Method, levels = Method)) %>%
separate(Method, into = c("Method", "Predicted_Matrix", "Cores"), sep = "_", fill = "right") %>%
mutate(
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix),
Cores = case_when(
Method %in% c("JRF", "GRNBoost2") ~ "15Cores",
TRUE ~ Cores
)
)
time_data
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "joint",
Predicted_Matrix == "early" ~ "early",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "late",
TRUE ~ Predicted_Matrix
)
)
df2
df2 <- keepscores %>%
mutate(
Predicted_Matrix_Mapped = case_when(
Method == "JRF" ~ "joint",
Predicted_Matrix == "early" ~ "late",
Predicted_Matrix %in% c("vote", "union", "inet") ~ "late",
TRUE ~ Predicted_Matrix
)
)
df2
df1_unique <- time_data %>%
dplyr::select(Method, Predicted_Matrix, Time_in_Seconds, Time_in_Minutes, Time_in_Hours) %>%
distinct()
df2 <- df2 %>%
left_join(df1_unique, by = c("Method", "Predicted_Matrix_Mapped" = "Predicted_Matrix")) %>%
dplyr::select(-Predicted_Matrix_Mapped)
df2
knitr::opts_knit$set(root.dir = "/home/francescoc/Desktop/scGraphVerse/data/",message=FALSE, warning=FALSE)
#library(RColorBrewer)
library(DT)
library(tidyverse)
#library(Seurat)
#library(STRINGdb)
#library(SingleCellExperiment)
library(scGraphVerse)
#library(BiocParallel)
#library(GENIE3)
#library(fmsb)
reticulate::use_python("/usr/bin/python3", required = TRUE)
arboreto <- reticulate::import("arboreto.algo")
pandas <- reticulate::import("pandas")
numpy <- reticulate::import("numpy")
time <- list()
ddir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/"
pdir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/plot/"
adjm <- as.matrix(read.table("./../analysis/simulation/adjacency/adjm_top200_p100.txt"))
colnames(adjm) <- rownames(adjm)
as.data.frame(adjm) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Ground Truth")
count_matrices <- readRDS("./../analysis/simulation/simdata/sim_n100p100.RDS")
dim(count_matrices[[1]])
count_matrices <- lapply(count_matrices, t)
as.data.frame(count_matrices[[1]]) %>%
slice_head(n=10) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Simulated Count matrix")
set.seed(1234)
time[["GENIE3_late_15Cores"]] <- system.time(
late <- infer_networks(count_matrices,
method="GENIE3",
nCores = 15)
)
late[[1]] %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
late_wadj <- generate_adjacency(late)
slate_wadj <- symmetrize(late_wadj, weight_function = "mean")
as.data.frame(slate_wadj[[1]]) %>%
slice_head(n=30) %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 symmetric weighted adjacency")
late_auc <- plotROC(slate_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration", is_binary = F)
slate_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = slate_wadj,
n = 3,
method = "GENIE3",
nCores = 15)
