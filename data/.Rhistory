plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/late_dots_n100.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(!Predicted_Matrix %in% c("inet", "union")) %>%
mutate(
Predicted_Matrix = ifelse(Predicted_Matrix == "vote", "late", Predicted_Matrix),
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix)  # Replace JRF with joint
)
met_comp_long <- met_comp %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=100 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_comp.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp_long <- met_comp %>%
pivot_longer(cols = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=100 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_graph_comp.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
ls
met_files <- c("/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp100n500_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp200n500_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp500n500_10runs.txt")
read_and_fulljoin <- function(files) {
df_list <- lapply(files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
full_joined_df <- Reduce(function(x, y) full_join(x, y), df_list)
return(full_joined_df)
}
met_data <- read_and_fulljoin(met_files)
met_late <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(Predicted_Matrix %in% c("vote", "union", "inet")) %>%
filter(Method != "JRF")
met_late_long <- met_late %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_late_long, aes(x = p, y = Value,
color = Method,
shape = Predicted_Matrix,
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.4, alpha=0.7) +  # Slightly increase line size and adjust transparency
geom_point(size = 2, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
ggtitle("n=500 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
knitr::opts_knit$set(root.dir = "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results",message=FALSE, warning=FALSE)
library(dplyr)
library(purrr)
library(patchwork)
library(tidyr)
library(ggplot2)
met_files <- c("/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp100_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp200_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp500_10runs.txt")
read_and_fulljoin <- function(files) {
df_list <- lapply(files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
full_joined_df <- Reduce(function(x, y) full_join(x, y), df_list)
return(full_joined_df)
}
met_data <- read_and_fulljoin(met_files)
met_late <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(Predicted_Matrix %in% c("vote", "union", "inet")) %>%
filter(Method != "JRF")
met_late_long <- met_late %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_late_long, aes(x = p, y = Value,
color = Method,
shape = Predicted_Matrix,
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.4, alpha=0.7) +  # Slightly increase line size and adjust transparency
geom_point(size = 2, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
ggtitle("n=100 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/late_dots_n100.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(!Predicted_Matrix %in% c("inet", "union")) %>%
mutate(
Predicted_Matrix = ifelse(Predicted_Matrix == "vote", "late", Predicted_Matrix),
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix)  # Replace JRF with joint
)
met_comp_long <- met_comp %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=100 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_comp.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp_long <- met_comp %>%
pivot_longer(cols = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=100 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_graph_comp.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_files <- c("/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp100n500_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp200n500_10runs.txt",
"/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/simp500n500_10runs.txt")
read_and_fulljoin <- function(files) {
df_list <- lapply(files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
full_joined_df <- Reduce(function(x, y) full_join(x, y), df_list)
return(full_joined_df)
}
met_data <- read_and_fulljoin(met_files)
met_late <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(Predicted_Matrix %in% c("vote", "union", "inet")) %>%
filter(Method != "JRF")
met_late_long <- met_late %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_late_long, aes(x = p, y = Value,
color = Method,
shape = Predicted_Matrix,
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.4, alpha=0.7) +  # Slightly increase line size and adjust transparency
geom_point(size = 2, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
ggtitle("n=500 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/late_dots_n500.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp <- met_data %>%
mutate(Ratio = as.character(Ratio_mean),
p = as.character(p_mean)) %>%
filter(!Predicted_Matrix %in% c("inet", "union")) %>%
mutate(
Predicted_Matrix = ifelse(Predicted_Matrix == "vote", "late", Predicted_Matrix),
Predicted_Matrix = ifelse(Method == "JRF", "joint", Predicted_Matrix)  # Replace JRF with joint
)
met_comp_long <- met_comp %>%
pivot_longer(cols = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("TPR_mean", "FPR_mean", "Precision_mean", "F1_mean", "MCC_mean", "Time_in_Minutes_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=500 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_comp_n500.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
met_comp_long <- met_comp %>%
pivot_longer(cols = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean"),
names_to = "Metric", values_to = "Value") %>%
mutate(Metric = factor(Metric, levels = c("Modularity_mean", "Density_mean", "Transitivity_mean", "VI_mean", "NMI_mean", "ARI_mean")),
p = factor(p, levels = c("82", "217", "554")))
plot_base <- ggplot(met_comp_long, aes(x = p, y = Value,
color = Method,
linetype = Predicted_Matrix,  # Change to linetype
group = interaction(Method, Predicted_Matrix))) +
geom_line(size = 0.7, alpha=0.8) +  # Increase line size for better visibility
geom_point(size = 1, alpha=0.8) +    # Increase point size for better visibility
labs(x = "Number of Genes (p)", y = "Performance", color = "Method", shape = "Late Strategy") +
theme_minimal() +
scale_color_manual("Methods", values = c("GENIE3"="purple4", "GRNBoost2"="forestgreen", "JRF"="darkorange")) +
scale_linetype_manual("Integration", values = c("late"="dashed", "early"="dotted", "joint"="solid")) +  # Custom line types
ggtitle("n=500 k=3") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
plot_final <- plot_base + facet_wrap(~Metric, scales = "free", ncol = 3)
print(plot_final)
ggsave("./../analysis/simulation/plot/metrics_graph_comp_n500.png", plot_final, width = 8, height = 5, dpi = 300, bg = "white")
library(scGraphVerse)
help(JRF)
library(JRF)
help(JRF)
mat <- matrix(1:12, nrow = 3)
scale(mat)                  # global column-wise normalization
mat
scale(mat)                  # global column-wise normalization
t(apply(mat, 1, scale))     # row-wise normalization
t(scale(t(mat)))            # same as above
(mat - mean(mat)) / sd(mat) # global flat normalization
library(tidyverse)
library(scGraphVerse)
time <- list()
ddir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/"
pdir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/plot/"
adjm <- as.matrix(read.table("./../analysis/simulation/adjacency/adjm_top200_p100.txt"))
colnames(adjm) <- rownames(adjm)
adjm <- as.matrix(read.table("./../analysis/simulation/adjacency/adjm_top200_p100.txt"))
setwd("/home/francescoc/Desktop/scGraphVerse/data/")
ddir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/"
pdir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/plot/"
library(tidyverse)
library(scGraphVerse)
modules <- init_py(python_path ="/usr/bin/python3", required = TRUE , py_seed = 1234)
modules <- init_py(python_path ="/usr/bin/python3", required = TRUE)
time <- list()
ddir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/results/"
pdir <- "/home/francescoc/Desktop/scGraphVerse/analysis/simulation/plot/"
adjm <- as.matrix(read.table("./../analysis/simulation/adjacency/adjm_top200_p100.txt"))
colnames(adjm) <- rownames(adjm)
count_matrices <- readRDS("./../analysis/simulation/simdata/sim_n100p100.RDS")
count_matrices <- lapply(count_matrices, t)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
head(adj)
GENIE3::getLinkList(adj)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
adj1 <- GENIE3::GENIE3(count_matrices[[1]], nCores = 1)
identical(adj,adj1)
set.seed(1234)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
set.seed(1234)
adj1 <- GENIE3::GENIE3(count_matrices[[1]], nCores = 1)
identical(adj,adj1)
adj1
set.seed(1234)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
set.seed(1234)
adj1 <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
identical(adj,adj1)
set.seed(1234)
genie3_late <- infer_networks(count_matrices[[1]],
method="GENIE3",
nCores = 15)
set.seed(1234)
genie3_late <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15)
set.seed(1234)
genie3_late1 <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15)
identical(genie3_late[[1]], genie3_late1[[1]])
genie3_late[[1]]
late <- generate_adjacency(genie3_late)
late1 <- generate_adjacency(genie3_late1)
identical(late[[1]], late1[[1]])
View(late)
View(late[[1]])
View(late1[[1]])
set.seed(1234)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
set.seed(1234)
adj1 <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
identical(adj,adj1)
set.seed(1234)
genie3_late <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15)
set.seed(1234)
genie3_late1 <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15)
late <- generate_adjacency(genie3_late)
late1 <- generate_adjacency(genie3_late1)
identical(late[[1]], late1[[1]])
infer_networks <- function(count_matrices_list,
method = "GENIE3",
adjm = NULL,
nCores = BiocParallel::bpworkers(BiocParallel::bpparam()) - 1,
grnboost_modules = NULL,
seed = NULL) {
method <- match.arg(method, choices = c("GENIE3", "GRNBoost2", "ZILGM", "JRF", "PCzinb"))
if (!is.null(seed)) set.seed(seed)  # for GENIE3, GRNBoost2, ZILGM
# Normalize input matrices
count_matrices_list <- lapply(count_matrices_list, function(obj) {
if (inherits(obj, "Seurat")) {
expr <- Seurat::GetAssayData(obj, assay = "RNA", slot = "counts")
as.matrix(expr)
} else if (inherits(obj, "SingleCellExperiment")) {
expr <- SummarizedExperiment::assay(obj, "counts")
as.matrix(expr)
} else {
as.matrix(obj)
}
})
# --- GENIE3 ---
if (method == "GENIE3") {
return(lapply(count_matrices_list, function(mat) {
if (!is.null(seed)) set.seed(seed)
adj <- GENIE3::GENIE3(mat, nCores = nCores)
GENIE3::getLinkList(adj)
}))
}
# --- GRNBoost2 ---
if (method == "GRNBoost2") {
if (is.null(grnboost_modules)) {
stop("For method 'GRNBoost2', please provide Python modules via `init_py()`.")
}
return(lapply(seq_along(count_matrices_list), function(i) {
if (!is.null(seed)) set.seed(seed)
mat <- count_matrices_list[[i]]
df <- as.data.frame(t(mat))
genes <- colnames(df)
df_pandas <- grnboost_modules$pandas$DataFrame(
data = as.matrix(df),
columns = genes,
index = rownames(df)
)
grnboost_modules$arboreto$grnboost2(df_pandas, gene_names = genes)
}))
}
# --- ZILGM ---
if (method == "ZILGM") {
zilgm_fits <- lapply(count_matrices_list, function(mat) {
if (!is.null(seed)) set.seed(seed)
gene_names <- rownames(mat)
lambda_max <- ZILGM::find_lammax(t(mat))
lambda_seq <- exp(seq(log(lambda_max), log(1e-4 * lambda_max), length.out = 50))
fit <- ZILGM::zilgm(
X = t(mat),
lambda = lambda_seq,
family = "NBII",
update_type = "IRLS",
do_boot = TRUE,
boot_num = 10,
sym = "OR",
nCores = nCores
)
list(fit = fit, genes = gene_names)
})
network_results <- lapply(zilgm_fits, function(result) {
mat <- result$fit$network[[result$fit$opt_index]]
rownames(mat) <- result$genes
colnames(mat) <- result$genes
if (!is.null(adjm)) {
rownames(mat) <- rownames(adjm)
colnames(mat) <- colnames(adjm)
}
mat
})
lambda_results <- lapply(zilgm_fits, function(result) {
nets <- lapply(result$fit$network, as.matrix)
names(nets) <- result$fit$lambda
for (i in seq_along(nets)) {
rownames(nets[[i]]) <- result$genes
colnames(nets[[i]]) <- result$genes
if (!is.null(adjm)) {
rownames(nets[[i]]) <- rownames(adjm)
colnames(nets[[i]]) <- colnames(adjm)
}
}
nets
})
return(list(
network_results = lapply(network_results, as.matrix),
lambda_results = lambda_results
))
}
# --- PCzinb ---
if (method == "PCzinb") {
pc_param <- if (!is.null(seed)) {
BiocParallel::MulticoreParam(workers = nCores, RNGseed = seed)
} else {
BiocParallel::MulticoreParam(workers = nCores)
}
return(BiocParallel::bplapply(count_matrices_list, function(mat) {
net <- learn2count::PCzinb(t(mat), method = "zinb1", maxcard = 2)
if (!is.null(adjm)) {
rownames(net) <- rownames(adjm)
colnames(net) <- colnames(adjm)
}
net
}, BPPARAM = pc_param))
}
# --- JRF ---
if (method == "JRF") {
jrf_param <- if (!is.null(seed)) {
BiocParallel::MulticoreParam(workers = nCores, RNGseed = seed)
} else {
BiocParallel::MulticoreParam(workers = nCores)
}
norm_list <- BiocParallel::bplapply(count_matrices_list, function(x) {
t(scale(t(x)))
}, BPPARAM = jrf_param)
rf <- JRF::JRF(
X = norm_list,
genes.name = rownames(norm_list[[1]]),
ntree = 500,
mtry = round(sqrt(nrow(norm_list[[1]]) - 1))
)
return(list(rf))
}
}
set.seed(1234)
adj <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
set.seed(1234)
adj1 <- GENIE3::GENIE3(count_matrices[[1]], nCores = 15)
identical(adj,adj1)
genie3_late <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15,
seed = 1234)
genie3_late1 <- infer_networks(list(count_matrices[[1]]),
method="GENIE3",
nCores = 15,
seed = 1234)
late <- generate_adjacency(genie3_late)
late1 <- generate_adjacency(genie3_late1)
identical(late[[1]], late1[[1]])
remove.packages("scGraphVerse")
.rs.restartR()
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("ngsFC/scGraphVerse", force = T)
remove.packages("scGraphVerse")
.rs.restartR()
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("ngsFC/scGraphVerse", force = T)
remove.packages("scGraphVerse")
.rs.restartR()
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("ngsFC/scGraphVerse", force = T)
