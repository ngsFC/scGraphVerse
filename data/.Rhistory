count_matrix_df <- as.data.frame(count_matrices[[i]])
genes <- colnames(count_matrix_df)
df_pandas <- pandas$DataFrame(data = count_matrix_df, columns = genes, index = rownames(count_matrix_df))
# Apply the arboreto grnboost2 function and store the result
grn_links <- arboreto$grnboost2(df_pandas, gene_names = genes)
# Store the result in the list
all_grn_links[[i]] <- grn_links
}
use_python("/usr/bin/python3", required = TRUE)
arboreto <- import("arboreto.algo")
pandas <- import("pandas")
numpy <- import("numpy")
# Initialize an empty list to store the GRNBoost2 links for each count matrix
all_grn_links <- list()
# Loop through each matrix in the count_matrices list
for (i in seq_along(count_matrices)) {
# Convert the current count matrix to a pandas DataFrame
count_matrix_df <- as.data.frame(count_matrices[[i]])
genes <- colnames(count_matrix_df)
df_pandas <- pandas$DataFrame(data = count_matrix_df, columns = genes, index = rownames(count_matrix_df))
# Apply the arboreto grnboost2 function and store the result
grn_links <- arboreto$grnboost2(df_pandas, gene_names = genes)
# Store the result in the list
all_grn_links[[i]] <- grn_links
}
# If you want to view a specific result (e.g., for the first count matrix)
all_grn_links[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 links for count matrix 1")
adj_matrix_list <- list()
adj_matrix_list <- list()
for (name in names(all_grn_links)) {
link_list_genie3 <- all_grn_links[[name]]
gene_names <- unique(c(link_list_genie3$TF, link_list_genie3$target))
adj_matrix_genie3 <- matrix(0, nrow = length(gene_names), ncol = length(gene_names))
rownames(adj_matrix_genie3) <- colnames(adj_matrix_genie3) <- gene_names
weight_cutoff <- quantile(link_list_genie3$importance, 0.70)  # Adjust this value as needed
weight_distribution_plot <- ggplot(data = link_list_genie3, aes(x = importance)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
geom_vline(aes(xintercept = weight_cutoff), color = "red", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = paste("Distribution of Weights for", name),
x = "Weight",
y = "Frequency",
caption = paste("Cut-off point:", round(weight_cutoff, 3))) +
theme(plot.title = element_text(hjust = 0.5)) #+
#xlim(0, 1)  # Adjust x-axis limits as needed
print(weight_distribution_plot)
for (i in 1:nrow(link_list_genie3)) {
regulator <- link_list_genie3$TF[i]
target <- link_list_genie3$target[i]
weight <- link_list_genie3$weight[i]
if (weight >= weight_cutoff) {
adj_matrix_genie3[regulator, target] <- 1
adj_matrix_genie3[target, regulator] <- 1  # Ensure symmetry
}
}
diag(adj_matrix_genie3) <- 1
adj_matrix_list[[name]] <- adj_matrix_genie3
write.csv(adj_matrix_genie3, paste0("genie3_adjacency_matrix_", name, "_cutoff_", round(weight_cutoff, 2), ".csv"), row.names = TRUE)
}
for (name in names(all_grn_links)) {
link_list_genie3 <- all_grn_links[[name]]
gene_names <- unique(c(link_list_genie3$TF, link_list_genie3$target))
adj_matrix_genie3 <- matrix(0, nrow = length(gene_names), ncol = length(gene_names))
rownames(adj_matrix_genie3) <- colnames(adj_matrix_genie3) <- gene_names
weight_cutoff <- quantile(link_list_genie3$importance, 0.70)  # Adjust this value as needed
weight_distribution_plot <- ggplot(data = link_list_genie3, aes(x = importance)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
geom_vline(aes(xintercept = weight_cutoff), color = "red", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = paste("Distribution of Weights for", name),
x = "Weight",
y = "Frequency",
caption = paste("Cut-off point:", round(weight_cutoff, 3))) +
theme(plot.title = element_text(hjust = 0.5)) #+
#xlim(0, 1)  # Adjust x-axis limits as needed
print(weight_distribution_plot)
for (i in 1:nrow(link_list_genie3)) {
regulator <- link_list_genie3$TF[i]
target <- link_list_genie3$target[i]
weight <- link_list_genie3$weight[i]
if (weight >= weight_cutoff) {
adj_matrix_genie3[regulator, target] <- 1
adj_matrix_genie3[target, regulator] <- 1  # Ensure symmetry
}
}
diag(adj_matrix_genie3) <- 1
adj_matrix_list[[name]] <- adj_matrix_genie3
write.csv(adj_matrix_genie3, paste0("grnboost_adjacency_matrix_", name, "_cutoff_", round(weight_cutoff, 2), ".csv"), row.names = TRUE)
}
adj_matrix_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
adj_matrix_list <- list()
for (name in names(all_grn_links)) {
link_list_genie3 <- all_grn_links[[name]]
gene_names <- unique(c(link_list_genie3$TF, link_list_genie3$target))
adj_matrix_genie3 <- matrix(0, nrow = length(gene_names), ncol = length(gene_names))
rownames(adj_matrix_genie3) <- colnames(adj_matrix_genie3) <- gene_names
weight_cutoff <- quantile(link_list_genie3$importance, 0.70)  # Adjust this value as needed
weight_distribution_plot <- ggplot(data = link_list_genie3, aes(x = importance)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
geom_vline(aes(xintercept = weight_cutoff), color = "red", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = paste("Distribution of Weights for", name),
x = "Weight",
y = "Frequency",
caption = paste("Cut-off point:", round(weight_cutoff, 3))) +
theme(plot.title = element_text(hjust = 0.5)) #+
#xlim(0, 1)  # Adjust x-axis limits as needed
print(weight_distribution_plot)
for (i in 1:nrow(link_list_genie3)) {
regulator <- link_list_genie3$TF[i]
target <- link_list_genie3$target[i]
weight <- link_list_genie3$weight[i]
if (weight >= weight_cutoff) {
adj_matrix_genie3[regulator, target] <- 1
adj_matrix_genie3[target, regulator] <- 1  # Ensure symmetry
}
}
diag(adj_matrix_genie3) <- 1
adj_matrix_list[[name]] <- adj_matrix_genie3
write.csv(adj_matrix_genie3, paste0("grnboost_adjacency_matrix_", name, "_cutoff_", round(weight_cutoff, 2), ".csv"), row.names = TRUE)
}
adj_matrix_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
adj_matrix_list
all_grn_links[[2]]
adj_matrix_list <- list()
for (name in names(all_grn_links)) {
link_list_genie3 <- all_grn_links[[name]]
gene_names <- unique(c(link_list_genie3$TF, link_list_genie3$target))
adj_matrix_genie3 <- matrix(0, nrow = length(gene_names), ncol = length(gene_names))
rownames(adj_matrix_genie3) <- colnames(adj_matrix_genie3) <- gene_names
weight_cutoff <- quantile(link_list_genie3$importance, 0.70)  # Adjust this value as needed
weight_distribution_plot <- ggplot(data = link_list_genie3, aes(x = importance)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
geom_vline(aes(xintercept = weight_cutoff), color = "red", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = paste("Distribution of Weights for", name),
x = "Weight",
y = "Frequency",
caption = paste("Cut-off point:", round(weight_cutoff, 3))) +
theme(plot.title = element_text(hjust = 0.5)) #+
#xlim(0, 1)  # Adjust x-axis limits as needed
print(weight_distribution_plot)
for (i in 1:nrow(link_list_genie3)) {
regulator <- link_list_genie3$TF[i]
target <- link_list_genie3$target[i]
weight <- link_list_genie3$importance[i]
if (weight >= weight_cutoff) {
adj_matrix_genie3[regulator, target] <- 1
adj_matrix_genie3[target, regulator] <- 1  # Ensure symmetry
}
}
diag(adj_matrix_genie3) <- 1
adj_matrix_list[[name]] <- adj_matrix_genie3
write.csv(adj_matrix_genie3, paste0("grnboost_adjacency_matrix_", name, "_cutoff_", round(weight_cutoff, 2), ".csv"), row.names = TRUE)
}
adj_matrix_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
adj_matrix_list[1]
all_grn_links[[1]]
all_grn_links[[2]]
all_grn_links[[3]]
knitr::opts_chunk$set("/home/francescoc/Desktop/scGRN_simulation/analysis")
library(GENIE3)
library(doParallel)
library(igraph)
library(tidyverse)
library(DT)
library(reticulate)
library(learn2count)
library(rbenchmark)
?simdata
knitr::opts_chunk$set("/home/francescoc/Desktop/scGRN_simulation/R")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "foldable", timing = TRUE)
library(GENIE3)
library(doParallel)
library(igraph)
library(tidyverse)
library(DT)
library(reticulate)
library(learn2count)
library(rbenchmark)
library(reshape2)
source("dropo.R")
#count_matrix <- readRDS("./../data/simatx.RDS")
adjm <- read.table("./../data/adjacency_matrix.csv", header = T, row.names = 1, sep = ",") %>% as.matrix()
ncell <- 1000
nodes <- nrow(adjm)
set.seed(1130)
count_matrices <- lapply(1:5, function(i) {
set.seed(1130 + i)
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = 5, mu_noise = 1, theta = 1, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
count_matrices[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Simulated count matrix")
saveRDS(count_matrices, "./../analysis/count_matrices.RDS")
set.seed(5463)
for (i in 1:length(count_matrices)) {
set.seed(1130 + i)
count_matrices[[i]] <- dropo(count_matrices[[i]], dropout_rate = 0.10)
}
saveRDS(count_matrices, "./../analysis/count_matrices_drop010.RDS")
count_matrices[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Simulated count matrix")
set.seed(123)
link_list_genie3_list <- list()
for (i in seq_along(count_matrices)) {
regulatory_network_genie3 <- GENIE3(t(count_matrices[[i]]))
link_list_genie3 <- getLinkList(regulatory_network_genie3)
link_list_genie3_list[[paste0("Matrix_", i)]] <- link_list_genie3
}
saveRDS(link_list_genie3_list, "./../analysis/genie3_network_list.RDS")
link_list_genie3 %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
source("dropo.R")
source("generate_adjacency.R")
# Call the function with your link list and desired quantile
generate_adjacency_matrices(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
# Call the function with your link list and desired quantile
generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
library(GENIE3)
library(doParallel)
library(igraph)
library(tidyverse)
library(DT)
library(reticulate)
library(learn2count)
library(rbenchmark)
library(reshape2)
library(gridExtra)
# Call the function with your link list and desired quantile
generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
source("simmetric.R")
simmetric()
simmetric
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
head(link_list_genie3_list)
View(link_list_genie3_list[[1]])
mean(0.253181791382548, 0.242254087789908
)
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
head(link_list_genie3_list)
head(link_list_genie3_list[[1]])
link_list_genie3[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
View(link_list_genie3_list[[1]])
mean(0.235251719558548
, 0.232425608342812)
View(link_list_genie3_list[[2]])
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
View(link_list_genie3_list[[1]])
source("simmetric.R")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
View(link_list_genie3_list[[1]])
0.233838664
mean(0.235251719558548,0.232425608342812)
source("simmetric.R")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
mean(0.235251719558548
,0.232425608342812)
source("simmetric.R")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
mean(0.235251719558548, 0.232425608342812
)
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
View(link_list_genie3_list[[1]])
source("simmetric.R")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "mean")
View(link_list_genie3_list[[1]])
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
mean(0.235251719558548
, 0.232425608342812)
0.235251719558548+0.232425608342812
0.4676773/2
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
0.235251719558548
0.232425608342812
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "max")
View(link_list_genie3_list[[1]])
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
View(link_list_genie3_list[[1]])
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 simmetric output")
generate_adjacency
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 simmetric output")
generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
link_list_genie3_list[[1]]$Gene1
source("dropo.R")
source("generate_adjacency.R")
source("simmetric.R")
adj_matrix_list <- generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
link_list_genie3_list[[1]]
link_list_genie3_list <- readRDS("./../analysis/genie3_network_list.RDS")
link_list_genie3_list <- simmetric(link_list_genie3_list, weight_function = "min")
link_list_genie3_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 simmetric output")
adj_matrix_list <- generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
source("dropo.R")
source("generate_adjacency.R")
source("simmetric.R")
adj_matrix_list <- generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
adj_matrix_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
adj_matrix_list[[1]]
adj_matrix_list[[2]]
adj_matrix_list[[3]]
source("dropo.R")
source("generate_adjacency.R")
source("simmetric.R")
adj_matrix_list <- generate_adjacency(link_list_genie3_list, weight_quantile = 0.70, output_rds_file = "genie3_adjacency_matrices.RDS")
adj_matrix_list[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
dim(adj_matrix_list[[1]])
dim(adjm)
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1","Gene2","node1_string_id","node2_string_id","neighborhood_on_chromosome","gene_fusion","phylogenetic_cooccurrence","homology","coexpression","experimentally_determined_interaction","database_annotated","automated_textmining","combined_score")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
# Initialize an adjacency matrix with zeros and set diagonal to 1
adj_matrix <- matrix(0, nrow = length(genes), ncol = length(genes),
dimnames = list(genes, genes))
# Set diagonal elements to 1 (for self-loops)
diag(adj_matrix) <- 1
# Populate the adjacency matrix with weights
for (i in 1:nrow(data)) {
gene1 <- data$Gene1[i]
gene2 <- data$Gene2[i]
weight <- data$combined_score[i]
# Assign weight to both gene pairs (symmetrically)
adj_matrix[gene1, gene2] <- weight
adj_matrix[gene2, gene1] <- weight
}
# Convert the adjacency matrix to a data frame for easier viewing
adj_matrix_df <- as.data.frame(adj_matrix)
# Print the adjacency matrix
print(adj_matrix_df)
# Save the adjacency matrix to a CSV file (optional)
write.csv(adj_matrix_df, "weighted_adjacency_matrix.csv", row.names = TRUE)
# Convert all values greater than 0 to 1
adj_matrix_df[adj_matrix_df > 0] <- 1
# Save the transformed data to a new CSV file
write.csv(adj_matrix_df, "adjacency_matrix.csv", row.names = TRUE)
dim(adj_matrix_df)
