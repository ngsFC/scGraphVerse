library(learn2count)
library(reshape2)
library(gridExtra)
library(DiagrammeR)
library(pROC)
library(JRF)
library(DiagrammeRsvg)
library(rsvg)
library(RColorBrewer)
library(ZILGM)
library(patchwork)
library(scales)
library(INetTool)
library(knitr)
library(microbenchmark)
library(Seurat)
library(biomaRt)
library(STRINGdb)
library(httr)
library(msigdbr)
use_python("/usr/bin/python3", required = TRUE)
arboreto <- import("arboreto.algo")
pandas <- import("pandas")
numpy <- import("numpy")
time <- list()
source("generate_adjacency.R")
source("symmetrize.R")
source("pscores.R")
source("plotg.R")
source("compare_consensus.R")
source("create_consensus.R")
source("earlyj.R")
source("plotROC.R")
source("cutoff_adjacency.R")
source("infer_networks.R")
source("download_Atlas.R")
source("exploreCells.R")
source("pathg.R")
source("BioGRID_Adj.R")
grViz_output <- DiagrammeR::grViz("
digraph biological_workflow {
# Set up the graph attributes
graph [layout = dot, rankdir = TB]
# Define consistent node styles
node [shape = rectangle, style = filled, color = lightblue, fontsize = 12]
# Define nodes for each step
StartNode [label = 'Ground Thruth - String Regulatory Network', shape = oval, color = seagreen, fontcolor = black]
AdjacencyMatrix [label = 'Thruth Adjacency Matrix', shape = rectangle, color = seagreen]
SimulateData [label = 'Simulate Single-Cell Data', shape = rectangle, color = goldenrod]
# Reconstruction using Three Packages
LateIntegration [label = 'Late\nIntegration', shape = oval, color = khaki]
EarlyIntegration [label = 'Early\nIntegration', shape = oval, color = khaki]
Jointanalysis [label = 'Joint\nanalysis', shape = oval, color = khaki]
# Process
earlyj [label = 'earlyj.R', shape=diamond, color=lightblue, fontcolor=black]
networkinference [label = 'infer_networks.R\nGENIE3\nGRNBoost2\nZILGM\nJRF', shape = rectangle, color = goldenrod, fontcolor=black]
symmetrize [label = 'symmetrize.R', shape = rectangle, color = goldenrod, fontcolor=black]
plotROC [label = 'plotROC.R', shape=diamond, color=lightblue, fontcolor=black]
generateadjacency [label='generate_adjacency.R\nWeighted Adjacency', shape=rectangle, color=goldenrod, fontcolor=black]
cutoffadjacency [label='cutoff_adjacency.R\nBinary Adjacency', shape=rectangle, color=goldenrod, fontcolor=black]
pscores [label='pscores.R\nTPR\nFPR\nF1\nAccuracy\nPrecision', shape=diamond, color=lightblue, fontcolor=black]
voting [label='Voting\nUnion\nIntersection', shape=diamond, color=lightblue, fontcolor=black]
plotgcompare  [label='plotg.R\ncompare_consesus.R\nPlot Graphs', shape=rectangle, color=goldenrod, fontcolor=black]
# Define the workflow structure
StartNode -> AdjacencyMatrix
AdjacencyMatrix -> SimulateData
SimulateData -> LateIntegration
SimulateData -> EarlyIntegration
SimulateData -> Jointanalysis
EarlyIntegration -> earlyj
earlyj -> networkinference
LateIntegration -> networkinference
Jointanalysis -> networkinference
networkinference -> symmetrize
symmetrize -> plotROC
symmetrize -> generateadjacency
generateadjacency -> cutoffadjacency
cutoffadjacency -> pscores
cutoffadjacency -> voting
voting -> plotgcompare
voting -> pscores
}
")
svg_code <- export_svg(grViz_output)
rsvg::rsvg_png(charToRaw(svg_code), "./../analysis/flowchart.png")
grViz_output
grViz_output <- DiagrammeR::grViz("
digraph biological_workflow {
# Set up the graph attributes
graph [layout = dot, rankdir = TB]
# Define consistent node styles
node [shape = rectangle, style = filled, color = lightblue, fontsize = 12]
# Define nodes for each step
StartNode [label = 'Ground Thruth - String Regulatory Network', shape = oval, color = seagreen, fontcolor = black]
SimulateData [label = 'Simulate Single-Cell Data', shape = rectangle, color = goldenrod]
Netinf [label = 'Implemented functions', shape = rectangle, color = lightblue]
Performance [label = 'Performance metrics', shape = rectangle, color = goldenrod]
# Define the workflow structure
StartNode -> SimulateData
SimulateData -> Netinf
Netinf -> Performance
}
")
svg_code <- export_svg(grViz_output)
rsvg::rsvg_png(charToRaw(svg_code), "./../analysis/flowchart1.png")
grViz_output
grViz_output <- DiagrammeR::grViz("
digraph biological_workflow {
# Set up the graph attributes
graph [layout = dot, rankdir = LR]
# Define consistent node styles
node [shape = rectangle, style = filled, color = lightblue, fontsize = 12]
# Define nodes for each step
SimulateData [label = 'Raw count matrices\nfrom Single-cell experiments', shape = rectangle, color = goldenrod]
# Reconstruction using Three Packages
LateIntegration [label = 'Late\nIntegration', shape = oval, color = khaki]
EarlyIntegration [label = 'Early\nIntegration', shape = oval, color = khaki]
Jointanalysis [label = 'Joint\nanalysis', shape = oval, color = khaki]
# Process
networkinference [label = 'infer_networks.R', shape = rectangle, color = goldenrod, fontcolor=black]
symmetrize [label = 'symmetrize.R', shape = rectangle, color = goldenrod, fontcolor=black]
generateadjacency [label='generate_adjacency.R', shape=rectangle, color=goldenrod, fontcolor=black]
cutoffadjacency [label='cutoff_adjacency.R', shape=rectangle, color=goldenrod, fontcolor=black]
# Define the workflow structure
SimulateData -> LateIntegration
SimulateData -> EarlyIntegration
SimulateData -> Jointanalysis
EarlyIntegration -> networkinference
LateIntegration -> networkinference
Jointanalysis -> networkinference
networkinference -> symmetrize
symmetrize -> generateadjacency
generateadjacency -> cutoffadjacency
}
")
svg_code <- export_svg(grViz_output)
rsvg::rsvg_png(charToRaw(svg_code), "./../analysis/flowchart2.png")
grViz_output
#adjm <- read.table("./../data/Tcell_adjacency_matrix.csv", header = T, row.names = 1, sep = ",") %>% as.matrix()
#diag(adjm) <- 0
#adjm %>%
#    datatable(extensions = 'Buttons',
#            options = list(
#              dom = 'Bfrtip',
#              buttons = c('csv', 'excel'),
#              scrollX = TRUE,
#              pageLength = 10),
#            caption = "Ground Truth")
options(timeout = 600)
seurat_url <- "https://datasets.cellxgene.cziscience.com/8e64f5c1-e56c-4b0a-bc83-1447fed2e7a4.rds"
seurat_object <- download_Atlas(seurat_url)
celltype <- exploreCells(seurat_object)
mart <- biomaRt::useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
#msigdb_collections <- msigdbr_collections()
#print(msigdb_collections)
#kegg_pathways <- msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:KEGG")
#unique(kegg_pathways$gs_name)  # List KEGG pathway names
#keggf <- kegg_pathways %>% filter(gs_name %in% c("KEGG_T_CELL_RECEPTOR_SIGNALING_PATHWAY", "KEGG_CYTOKINE_CYTOKINE_RECEPTOR_INTERACTION", "KEGG_JAK_STAT_SIGNALING_PATHWAY", "KEGG_NOD_LIKE_RECEPTOR_SIGNALING_PATHWAY"))
#topgenes <- topExp(seurat_object, "mature NK T cell", mart, 200)
pathgenes <- pathg(seurat_object = seurat_object, cell_type = "mature NK T cell", mart = mart, top_n = 1000)
#unique(keggf$human_ensembl_gene)
biogrid_data <- read.delim("/home/francescoc/Desktop/GRN_project/data/biogrid_physical_s400.txt", header = TRUE, stringsAsFactors = FALSE)
#quantile(abs(Score), 0.75)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
top_genes <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = pathgenes,
mart = mart
)
top_genes <- top_genes$external_gene_name[top_genes$external_gene_name != ""]
result <- BioGRID_Adj(top_genes, biogrid_data)
wadjm <- result$weighted
adjm <- result$binary
common_names <- intersect(rownames(adjm), colnames(adjm))
adjm <- adjm[common_names, common_names, drop = FALSE]
print(dim(adjm))
gtruth <- igraph::graph_from_adjacency_matrix(adjm, mode = "undirected", diag = F)
num_nodes <- vcount(gtruth)
num_edges <- ecount(gtruth)
set.seed(1234)
plot(gtruth,
main = paste("Ground Truth\nNodes:", num_nodes, "Edges:", num_edges),
vertex.label.color = "black",
vertex.size = 6,
edge.width = 2,
vertex.label = NA,
vertex.color = "steelblue",
layout = igraph::layout_with_fr)
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
count_matrices[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "Simulated count matrix")
saveRDS(count_matrices, "./../analysis/count_matrices.RDS")
set.seed(1234)
time[["GENIE3_late_15Cores"]] <- system.time(
genie3_late <- infer_networks(count_matrices, method="GENIE3", nCores = 15)
)
saveRDS(genie3_late, "./../analysis/genie3_late.RDS")
genie3_late[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 output")
genie3_late_wadj <- generate_adjacency(genie3_late, ground.truth = adjm)
sgenie3_late_wadj <- symmetrize(genie3_late_wadj, weight_function = "mean")
genie3_late_auc <- plotROC(sgenie3_late_wadj, adjm, plot_title = "ROC curve - GENIE3 Late Integration")
sgenie3_late_wadj[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 symmetrize output")
sgenie3_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = sgenie3_late_wadj,
ground.truth = adjm,
n = 3,
method = "GENIE3",
nCores = 15)
sgenie3_late_adj[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GENIE3 adjacency")
scores.genie3.late.all <- pscores(adjm, sgenie3_late_adj)
scores.genie3.late.all$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores")
plots <- plotg(sgenie3_late_adj)
consesusm <- create_consensus(sgenie3_late_adj, method="vote")
consesusu <- create_consensus(sgenie3_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgenie3_late_adj, weighted_list = sgenie3_late_wadj, method = "INet", threshold = 0.05, ncores = 15)
scores.genie3.late <- pscores(adjm, list(consesusm))
scoresu.genie3.late <- pscores(adjm, list(consesusu))
scoresnet.genie3.late <- pscores(adjm, list(consesunet))
scores.genie3.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores vote")
scores.genie3.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores union")
scoresnet.genie3.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores INet")
set.seed(1234)
time[["GRNBoost_late"]] <- system.time(
grnb_late <- infer_networks(count_matrices, method="GRNBoost2")
)
saveRDS(grnb_late, "./../analysis/grnb_late.RDS")
grnb_late[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 output")
grnb_late_wadj <- generate_adjacency(grnb_late, ground.truth = adjm)
sgrnb_late_wadj <- symmetrize(grnb_late_wadj, weight_function = "mean")
grnb_late_auc <- plotROC(sgrnb_late_wadj, adjm, plot_title = "ROC curve - GRNBoost2 Late Integration")
sgrnb_late_wadj[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 symmetrize output")
sgrnb_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = sgrnb_late_wadj,
ground.truth = adjm,
n = 3,
method = "GRNBoost2")
sgrnb_late_adj[[1]] %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "GRNBoost2 adjacency")
scores.grn.late.all <- pscores(adjm, sgrnb_late_adj)
scores.grn.late.all$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores")
plots <- plotg(sgrnb_late_adj)
consesusm <- create_consensus(sgrnb_late_adj, method="vote")
consesusu <- create_consensus(sgrnb_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgrnb_late_adj, weighted_list = sgrnb_late_wadj, method = "INet", threshold = 0.05, ncores = 15)
scores.grn.late <- pscores(adjm, list(consesusm))
scoresu.grn.late <- pscores(adjm, list(consesusu))
scoresnet.grn.late <- pscores(adjm, list(consesunet))
scores.grn.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores vote")
scoresu.grn.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores union")
scoresnet.grn.late$Statistics %>%
datatable(extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
scrollX = TRUE,
pageLength = 10),
caption = "scores INet")
ajm_compared <- compare_consensus(consesusm, adjm)
ajm_compared <- compare_consensus(consesusu, adjm)
ajm_compared <- compare_consensus(consesunet, adjm)
set.seed(1234)
time[["ZILGM_late_15Cores"]] <- system.time(
zilgm_late <- infer_networks(count_matrices_list = count_matrices, method = "ZILGM", adjm = adjm, nCores = 15)
)
library(tidyverse)
methtab <- read.table("/home/francescoc/Downloads/GSE236026_WT.Day12.cpg.methexport.tab")
colnames(methtab) <- c("chr", "pos", "strand", "Cs", "TotalC")
View(methtab)
int <- methtab %>%
filter(chr == "chr1") %>%
filter(between(pos, 10474, 11451)) %>%
filter(strand == "+") %>%
mutate(meth = Cs/TotalC)
View(int)
# ---- Load library ----
setwd("/home/francescoc/Desktop/GRN_project/data")
library(tidyverse)
library(igraph)
library(ggraph)
library(pROC)
library(RColorBrewer)
library(scales)
library(gridExtra)
library(INetTool)
library(reticulate)
use_python("/usr/bin/python3", required = TRUE)
arboreto <- import("arboreto.algo")
pandas <- import("pandas")
numpy <- import("numpy")
source("./../R/earlyj.R")
source("./../R/infer_networks.R")
source("./../R/generate_adjacency.R")
source("./../R/symmetrize.R")
source("./../R/plotROC.R")
source("./../R/cutoff_adjacency.R")
source("./../R/pscores.R")
source("./../R/plotg.R")
source("./../R/create_consensus.R")
source("./../R/compare_consensus.R")
time <- list()
ddir <- "/home/francescoc/Desktop/GRN_project/analysis/GRNBoost2/data"
pdir <- "/home/francescoc/Desktop/GRN_project/analysis/GRNBoost2/plots"
# ---- Load Count matrices and adjm ----
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
count_matrices <- readRDS("./../analysis/count_matrices_n500xp643.RDS")
dim(count_matrices[[1]])
# ---- GRNBoost2 late integration ----
set.seed(1234)
time[["grnboost_late"]] <- system.time(
grnboost_late <- infer_networks(count_matrices,
method="GRNBoost2",
nCores = 15)
)
saveRDS(grnboost_late, paste(ddir, "grnboost_late_n500p643.RDS", sep = "/"))
# ---- Symmetrize and ROC ----
grnboost_late_wadj <- generate_adjacency(grnboost_late, ground.truth = adjm)
sgrnboost_late_wadj <- symmetrize(grnboost_late_wadj, weight_function = "mean")
png(paste(pdir, "grnboost_late_n500p643_auc.png", sep = "/"), width = 2400, height = 1800, res = 300)
grnboost_late_auc <- plotROC(sgrnboost_late_wadj, adjm, plot_title = "ROC curve - grnboost Late Integration")
dev.off()
write.table()
# ---- Cutoff ----
sgrnboost_late_adj <- cutoff_adjacency(count_matrices = count_matrices,
weighted_adjm_list = sgrnboost_late_wadj,
ground.truth = adjm,
n = 3,
method = "GRNBoost2",
nCores = 15)
png(paste(pdir, "grnboost_late_n500p643_scores.png", sep = "/"), width = 2400, height = 1800, res = 300)
scores.grnboost.late.all <- pscores(adjm, sgrnboost_late_adj)
dev.off()
png(paste(pdir, "grnboost_late_n500p643_mplots.png", sep = "/"), width = 2400, height = 2400, res = 300)
plots <- plotg(sgrnboost_late_adj)
dev.off()
cbind(scores.grnboost.late.all$Statistics, grnboost_late_auc) %>% write.table(., paste(ddir, "grnboost_late_n500p643_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
# ---- Consensus ----
consesusm <- create_consensus(sgrnboost_late_adj, method="vote")
consesusu <- create_consensus(sgrnboost_late_adj, method="union")
consesunet <- create_consensus(adj_matrix_list = sgrnboost_late_adj, weighted_list = sgrnboost_late_wadj, method = "INet", threshold = 0.05)
png(paste(pdir, "grnboost_late_n500p643_vote_score.png", sep = "/"), width = 2400, height = 2400, res = 300)
scores.grnboost.late <- pscores(adjm, list(consesusm))
dev.off()
png(paste(pdir, "grnboost_late_n500p643_union_score.png", sep = "/"), width = 2400, height = 2400, res = 300)
scoresu.grnboost.late <- pscores(adjm, list(consesusu))
dev.off()
png(paste(pdir, "grnboost_late_n500p643_inet_score.png", sep = "/"), width = 2400, height = 2400, res = 300)
scoresnet.grnboost.late <- pscores(adjm, list(consesunet))
dev.off()
# ---- Plot comparison ----
png(paste(pdir, "grnboost_late_n500p643_vote_plot.png", sep = "/"), width = 4000, height = 2400, res = 300)
ajm_compared <- compare_consensus(consesusm, adjm)
dev.off()
png(paste(pdir, "grnboost_late_n500p643_union_plot.png", sep = "/"), width = 4000, height = 2400, res = 300)
ajm_compared <- compare_consensus(consesusu, adjm)
dev.off()
png(paste(pdir, "grnboost_late_n500p643_inet_plot.png", sep = "/"), width = 4000, height = 2400, res = 300)
ajm_compared <- compare_consensus(consesunet, adjm)
dev.off()
# ---- GRNBoost2 early integration ----
early_matrix <- list(earlyj(count_matrices))
set.seed(1234)
time[["grnboost_early"]] <- system.time(
grnboost_early <- infer_networks(early_matrix, method="GRNBoost2")
)
saveRDS(grnboost_early, paste(ddir, "grnboost_early_n500p643.RDS", sep = "/"))
# ---- Symmetrize and ROC ----
grnboost_early_wadj <- generate_adjacency(grnboost_early, ground.truth = adjm)
sgrnboost_early_wadj <- symmetrize(grnboost_early_wadj, weight_function = "mean")
png(paste(pdir, "grnboost_early_n500p643_auc.png", sep = "/"), width = 2400, height = 1800, res = 300)
grnboost_early_auc <- plotROC(sgrnboost_early_wadj, adjm, plot_title = "ROC curve - grnboost Early Integration")
dev.off()
# ---- Cutoff ----
sgrnboost_early_adj <- cutoff_adjacency(count_matrices = early_matrix,
weighted_adjm_list = sgrnboost_early_wadj,
ground.truth = adjm,
n = 2,
method = "GRNBoost2",
nCores = 15)
png(paste(pdir, "grnboost_early_n500p643_scores.png", sep = "/"), width = 2400, height = 1800, res = 300)
scores.grnboost.early <- pscores(adjm, sgrnboost_early_adj)
dev.off()
png(paste(pdir, "grnboost_early_n500p643_mplots.png", sep = "/"), width = 2400, height = 2400, res = 300)
plots <- plotg(sgrnboost_early_adj)
dev.off()
cbind(scores.grnboost.early$Statistics, grnboost_early_auc) %>% write.table(., paste(ddir, "grnboost_early_n500p643_perf.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
# ---- Plot comparison ----
png(paste(pdir, "grnboost_early_n500p643_plot.png", sep = "/"), width = 4000, height = 2400, res = 300)
ajm_compared <- compare_consensus(sgrnboost_early_adj[[1]], adjm)
dev.off()
time_data <- data.frame(
Method = names(time),
Time_in_Seconds = sapply(time, function(x) {
if ("elapsed" %in% names(x)) x["elapsed"] else NA
})
)
time_data$Time_in_Minutes <- as.numeric(time_data$Time_in_Seconds) / 60
time_data$Time_in_Hours <- as.numeric(time_data$Time_in_Seconds) / 3600
time_data <- time_data[order(time_data$Time_in_Hours), ]
time_data$Method <- factor(time_data$Method, levels = time_data$Method)
write.table(time_data, paste(ddir, "grnboost_n500p643_timeres.txt", sep = "/"), sep = "\t", quote = F, col.names = T, row.names = F)
