colnames(c)
write.table(c, "rawcounts.txt", col.names = TRUE, row.names = FALSE, sep = "\t", quote = FALSE)
library(Seurat)
# Read in the expression matrix The first row is a header row, the first column is rownames
exp.mat <- read.table(file = "/home/francescoc/Desktop/Project/singlecell/scRNAseq/analysis/files_2scEmbryo/all.filt.matrix.txt", header = TRUE, as.is = TRUE, row.names = 1)
rownames(exp.mat) <- toupper(rownames(exp.mat))
# A list of cell cycle markers, from Tirosh et al, 2015, is loaded with Seurat.  We can
# segregate this list into markers of G2/M phase and markers of S phase
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
s.genes
g2m.genes <- cc.genes$g2m.genes
g2m.genes
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/KS_RNA/raw_data/alignment")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "foldable")
#class.source = "foldable"
#class.source = "hide"
library("plotly")
library("EDASeq")
library("DESeq2")
library("RUVSeq")
library("edgeR")
library("NOISeq")
library("plotly")
library("EDASeq")
library("DESeq2")
library("RUVSeq")
library("edgeR")
#library("NOISeq")
library("knitr")
library("pheatmap")
library("kableExtra")
library("gProfileR")
library("gprofiler2")
library("biomaRt")
library("corrplot")
library("stats")
library("tidyverse")
library("ggfortify")
library("RColorBrewer")
library("EnhancedVolcano")
library("plotly")
library("EDASeq")
library("DESeq2")
library("RUVSeq")
library("edgeR")
#library("NOISeq")
library("knitr")
library("pheatmap")
library("kableExtra")
library("gProfileR")
library("gprofiler2")
library("biomaRt")
library("corrplot")
library("stats")
library("tidyverse")
library("ggfortify")
library("RColorBrewer")
#library("EnhancedVolcano")
library("cowplot")
library("rmarkdown")
library("reshape")
library("gridExtra")
library("grid")
library("sva")
library("VennDiagram")
library("qdapTools")
library("UpSetR")
library("patchwork")
library("DT")
library("knitr")
counts <- read.table("WTs.featureCounts.hg19.txt", header=TRUE, row.names=1)
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "hide", echo = knitr::is_html_output())
#class.source = "foldable"
#class.source = "hide"
library("ChAMP")
library("RColorBrewer")
library("tidyverse")
library("quadprog")
library("vegan")
library("stringr")
library("factoextra")
library("viridis")
library("rmdformats")
library("pheatmap")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("ChIPseeker")
library("gprofiler2")
library("VennDiagram")
library("limma")
library("plotly")
library("cowplot")
library("ReactomePA")
library("knitr")
library("rmarkdown")
library("kableExtra")
library("reshape")
library("gridExtra")
library("grid")
library("ggpubr")
library("valr")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("patchwork")
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "hide", echo = knitr::is_html_output())
#class.source = "foldable"
#class.source = "hide"
library("ChAMP")
library("RColorBrewer")
library("tidyverse")
library("quadprog")
library("vegan")
library("stringr")
library("factoextra")
library("viridis")
library("rmdformats")
library("pheatmap")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("ChIPseeker")
library("gprofiler2")
library("VennDiagram")
library("limma")
library("plotly")
library("cowplot")
library("ReactomePA")
library("knitr")
library("rmarkdown")
library("kableExtra")
library("reshape")
library("gridExtra")
library("grid")
library("ggpubr")
library("valr")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("patchwork")
methylationarray <- "EPIC"
norm <- "BMIQ"
testDir <- "/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla"
breaksList1 <- seq(-0.5, 0.5, by = 0.01)
breaksList <- seq(0, 1, by = 0.01)
annEPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
bedEPIC <- as.data.frame(annEPIC) %>%
rownames_to_column("probeID") %>%
dplyr::select(chr, pos, probeID) %>%
mutate(end = pos) %>%
relocate(end, .after = pos)
colnames(bedEPIC) <- c("chrom", "start", "end", "probeID")
annotation <- data.frame(rownames(annEPIC), annEPIC$UCSC_RefGene_Name, annEPIC$UCSC_RefGene_Group)
colnames(annotation) <- c("probeID", "Gene", "feature")
all.genes <- annotation %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";")
all.genes.TSS <- annotation %>%
filter(grepl("TSS200", feature) | grepl("TSS1500", feature))
all.genes.TSS <- all.genes.TSS %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";") %>%
filter(feature == "TSS200" | feature == "TSS1500")
bg.genes <- unique(all.genes$Gene)
bg.genes.TSS <- unique(all.genes.TSS$Gene)
myLoad <- champ.load(testDir,
method="ChAMP",
methValue="B",
autoimpute=TRUE,
filterDetP=TRUE,
ProbeCutoff=0,
SampleCutoff=0.1,
detPcut=0.01,
filterBeads=TRUE,
beadCutoff=0.05,
filterNoCG=TRUE,
filterSNPs=TRUE,
population=NULL,
filterMultiHit=TRUE,
filterXY=TRUE,
force=FALSE,
arraytype=methylationarray)
ann.column <- data.frame(Sample = myLoad$pd$Sample_Group,
Syndrome = myLoad$pd$Syndrome)
rownames(ann.column) <- myLoad$pd$Sample_Name
samplecolor <- list(Sample = c(Control = "Grey", Case = "Steel blue"),
Syndrome = c(KS="Red", BWS="Purple", DS="orange", RSTS="forest green", Control = "Grey"))
#myLoad$pd$Slide <- as.numeric(myLoad$pd$Slide)
myLoad$pd$Slide <- as.character(myLoad$pd$Slide)
myNorm <- champ.norm(beta=myLoad$beta,
arraytype=methylationarray,
method=norm,
plotBMIQ = TRUE,
cores = 8)
champ.SVD(beta = myNorm,
PDFplot = TRUE,
pd = myLoad$pd,
RGEffect = FALSE)
myCombat <- champ.runCombat(beta=myNorm,
variablename="Syndrome",
pd=myLoad$pd,
batchname=c("Array"),
logitTrans=TRUE
)
champ.SVD(beta=myCombat,
PDFplot=TRUE,
pd=myLoad$pd,
RGEffect=FALSE
)
#myCombat <- myNorm
myRefBase <- champ.refbase(beta=myCombat,arraytype="EPIC")
head(myRefBase)
myRefBase$CellFraction
cf <- myRefBase$CellFraction
dim(cf)
head(cf)
View(cf)
head(myLoad$pd$Sample_Group)
myLoad$pd$Sample_Group
myLoad$pd$Syndrome
a = cf[myLoad$pd$Syndrome == "DS",]
a
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
library(RColorBrewer)
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
age.pal <- brewer.pal(8,"Set1")
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
par(mfrow=c(1,1))
a = cf[myLoad$pd$Syndrome == "DS",]
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
axis(1, at=0:5*3 + 1.5, labels=colnames(a), tick=TRUE)
legend("topleft", legend=c("NewBorns","OLD"), fill=age.pal)
par(mfrow=c(1,1))
a = cf[myLoad$pd$Syndrome == "DS",]
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
axis(1, at=0:5*3 + 1.5, labels=colnames(a), tick=TRUE)
legend("topleft", legend=c("DS","Control"), fill=age.pal)
champ.refbase
data(CellTypeMeans450K)
CellTypeMeans450K
help("wilcox.test")
knitr::opts_chunk$set(echo = TRUE)
library(scater)
fname
paste0("Number of cells: ", dim(sce)[2])
paste0("Number of cells: ", dim(sce)[2])
paste0("Number of genes: ", dim(sce)[1])
table(sce$Group)
setwd("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data")
ls
ls
cd ..
ls
source("simulate_data.R")
setwd("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data")
source("simulate_data.R")
source("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
setwd("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data")
source("simulate_data.R")
source("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
source("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R", encoding = "UTF-8")
# Check if the file exists
file.exists("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
# Check file permissions
file.info("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
source("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
correct_path <- normalizePath("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R")
print(correct_path) # Check the normalized path
# Now try sourcing the normalized path
source(correct_path)
getwd()
source("simulate_data.R")
file_connection <- file("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R", "r")
readLines(file_connection)  # To see if the file can be read
close(file_connection)
source("/home/francescoc/Desktop/Project/tdsc/Benchmarking_Clustering_Methods_scRNAseq/simulate_data/simulate_data.R", encoding = "UTF-8")
source("test.R")
setwd("/home/francescoc/Desktop/Project/tdsc/scData_simulation")
source("simulate_data.R")
# Load necessary library
library(Matrix)
# Set the parameters
set.seed(42)  # For reproducibility
n_cells <- 100  # Number of T cells
n_genes <- 2000  # Number of genes (e.g., from T-cell markers and other genes)
mean_expression <- 10  # Mean expression value per gene
t_cell_marker_genes <- c("CD3D", "CD3E", "CD3G", "CD4", "CD8A", "CD8B")
# Step 1: Create a random gene expression matrix
# Simulate gene expression counts using a Negative Binomial distribution
gene_expression_matrix <- matrix(rnbinom(n_cells * n_genes, size=1, mu=mean_expression),
nrow=n_genes,
ncol=n_cells)
# Step 2: Add cell and gene names
gene_names <- paste0("Gene", 1:n_genes)  # Default gene names
colnames(gene_expression_matrix) <- paste0("Cell_", 1:n_cells)
rownames(gene_expression_matrix) <- gene_names
# Step 3: Simulate higher expression for T cell marker genes
# Let's simulate higher expression of some T cell marker genes
for (marker in t_cell_marker_genes) {
if (marker %in% gene_names) {
gene_expression_matrix[which(gene_names == marker), ] <- rnbinom(n_cells, size=1, mu=50)  # Higher expression
}
}
# Step 4: Add dropout noise (optional)
dropout_rate <- 0.1  # Assume 10% dropout rate
dropout_matrix <- matrix(rbinom(n_cells * n_genes, 1, dropout_rate), nrow=n_genes, ncol=n_cells)
gene_expression_matrix[dropout_matrix == 1] <- 0
# Step 5: Create a sparse matrix to save memory (optional)
sparse_gene_expression_matrix <- Matrix(gene_expression_matrix, sparse = TRUE)
# View the first few rows and columns of the matrix
head(gene_expression_matrix[, 1:5])
dim(gene_expression_matrix)
# Read the data
file_path <- "/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt"  # Replace with your actual file path
data <- read.table(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1", "Gene2", "Weight", "NetworkGroup", "Network")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
# Initialize an adjacency matrix with zeros
adj_matrix <- matrix(0, nrow = length(genes), ncol = length(genes),
dimnames = list(genes, genes))
# Populate the adjacency matrix with weights
for (i in 1:nrow(data)) {
gene1 <- data$Gene1[i]
gene2 <- data$Gene2[i]
weight <- data$Weight[i]
# Assign weight to both gene pairs (symmetrically)
adj_matrix[gene1, gene2] <- weight
adj_matrix[gene2, gene1] <- weight
}
# Convert the adjacency matrix to a data frame for easier viewing
adj_matrix_df <- as.data.frame(adj_matrix)
# Print the adjacency matrix
print(adj_matrix_df)
# Save the adjacency matrix to a CSV file (optional)
write.csv(adj_matrix_df, "adjacency_matrix.csv", row.names = TRUE)
# Read the data
file_path <- "/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt"  # Replace with your actual file path
# Load necessary library
library(dplyr)
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1", "Gene2", "Weight", "NetworkGroup", "Network")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
# Initialize an adjacency matrix with zeros
adj_matrix <- matrix(0, nrow = length(genes), ncol = length(genes),
dimnames = list(genes, genes))
# Populate the adjacency matrix with weights
for (i in 1:nrow(data)) {
gene1 <- data$Gene1[i]
gene2 <- data$Gene2[i]
weight <- data$Weight[i]
# Assign weight to both gene pairs (symmetrically)
adj_matrix[gene1, gene2] <- weight
adj_matrix[gene2, gene1] <- weight
}
# Convert the adjacency matrix to a data frame for easier viewing
adj_matrix_df <- as.data.frame(adj_matrix)
# Print the adjacency matrix
print(adj_matrix_df)
View
View(adj_matrix_df)
# Save the adjacency matrix to a CSV file (optional)
write.csv(adj_matrix_df, "adjacency_matrix.csv", row.names = TRUE)
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
# Read the data
file_path <- "genemania-interactions.txt"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
getwd()
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data/genemania-interactions.txt")
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "genemania-interactions.txt"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1", "Gene2", "Weight", "NetworkGroup", "Network")
head(data)
max(data$Weight)
data <- data %>% filter(Weight >= 0.7)
dim(data)
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "genemania-interactions.txt"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1", "Gene2", "Weight", "NetworkGroup", "Network")
dim(data)
# Read the data
file_path <- "genemania-interactions.txt"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1", "Gene2", "Weight", "NetworkGroup", "Network")
dim(data)
data <- data %>% filter(Weight >= 0.5)
dim(data)
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
View(data)
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
View(data)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
colnames(data)
dim(data)
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = T, sep = "\t", stringsAsFactors = FALSE)
dim(data)
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
head(data)
# Assign column names to the data frame
colnames(data) <- c("node1","node2","node1_string_id","node2_string_id","neighborhood_on_chromosome","gene_fusion","phylogenetic_cooccurrence","homology","coexpression","experimentally_determined_interaction","database_annotated","automated_textmining","combined_score")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
genes
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1","Gene2","node1_string_id","node2_string_id","neighborhood_on_chromosome","gene_fusion","phylogenetic_cooccurrence","homology","coexpression","experimentally_determined_interaction","database_annotated","automated_textmining","combined_score")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
# Initialize an adjacency matrix with zeros
adj_matrix <- matrix(0, nrow = length(genes), ncol = length(genes),
dimnames = list(genes, genes))
# Populate the adjacency matrix with weights
for (i in 1:nrow(data)) {
gene1 <- data$Gene1[i]
gene2 <- data$Gene2[i]
weight <- data$combined_score[i]
# Assign weight to both gene pairs (symmetrically)
adj_matrix[gene1, gene2] <- combined_score
adj_matrix[gene2, gene1] <- combined_score
}
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1","Gene2","node1_string_id","node2_string_id","neighborhood_on_chromosome","gene_fusion","phylogenetic_cooccurrence","homology","coexpression","experimentally_determined_interaction","database_annotated","automated_textmining","combined_score")
View
View(data)
colnames(data)
# Load necessary library
library(dplyr)
setwd("/home/francescoc/Desktop/scGRN_simulation/data")
# Read the data
file_path <- "string_interactions.tsv"  # Replace with your actual file path
data <- read.table(file_path, header = F, sep = "\t", stringsAsFactors = FALSE)
# Assign column names to the data frame
colnames(data) <- c("Gene1","Gene2","node1_string_id","node2_string_id","neighborhood_on_chromosome","gene_fusion","phylogenetic_cooccurrence","homology","coexpression","experimentally_determined_interaction","database_annotated","automated_textmining","combined_score")
# Create a list of unique genes
genes <- unique(c(data$Gene1, data$Gene2))
# Initialize an adjacency matrix with zeros
adj_matrix <- matrix(0, nrow = length(genes), ncol = length(genes),
dimnames = list(genes, genes))
# Populate the adjacency matrix with weights
for (i in 1:nrow(data)) {
gene1 <- data$Gene1[i]
gene2 <- data$Gene2[i]
weight <- data$combined_score[i]
# Assign weight to both gene pairs (symmetrically)
adj_matrix[gene1, gene2] <- weight
adj_matrix[gene2, gene1] <- weight
}
# Convert the adjacency matrix to a data frame for easier viewing
adj_matrix_df <- as.data.frame(adj_matrix)
# Print the adjacency matrix
print(adj_matrix_df)
dim8adj_matrix_df
dim(adj_matrix_df)
View(adj_matrix_df)
# Save the adjacency matrix to a CSV file (optional)
write.csv(adj_matrix_df, "weighted_adjacency_matrix.csv", row.names = TRUE)
# Convert all values greater than 0 to 1
adj_matrix_df[adj_matrix_df > 0] <- 1
head(adj_matrix_df)
# Save the transformed data to a new CSV file
write.csv(adj_matrix_df, "adjacency_matrix.csv", row.names = TRUE)
