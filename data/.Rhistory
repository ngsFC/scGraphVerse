knitr::opts_chunk$set(echo = TRUE)
setwd("/home/francescoc/Desktop/GRN_project/data")
library(tidyverse)
library(biomaRt)
library(igraph)
library(learn2count)
library(ggraph)
library(Seurat)
source("./../R/download_Atlas.R")
source("./../R/pathg.R")
source("./../R/BioGRID_Adj.R")
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)
biogrid_data <- biogrid_data[, c("Official.Symbol.Interactor.A",
"Official.Symbol.Interactor.B",
"Score",
"Experimental.System.Type",
"Organism.Name.Interactor.A",
"Organism.Name.Interactor.B")]
names(biogrid_data) <- c("Interactor_A", "Interactor_B", "Score", "type", "org1", "org2")
biogrid_data <- biogrid_data %>%
mutate(Score = as.numeric(Score)) %>%
filter(type == "physical") %>%
filter(!is.na(Score)) %>%
filter(abs(Score) > 300) %>%
filter(org1 == "Homo sapiens" & org2 == "Homo sapiens")
write.table(biogrid_data, "biogrid_physical_s300.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
options(timeout = 600)
# PBMC Dataset: Local and systemic responses to SARS-CoV-2 infection in children and adults
seurat_url <- "https://datasets.cellxgene.cziscience.com/89619149-162f-4839-8e97-24735924417c.rds"
seurat_object <- download_Atlas(seurat_url)
seurat_subset <- subset(
x = seurat_object,
subset = disease == "normal" & cell_type == "CD4-positive helper T cell" & donor_id %in% c("AN6", "AN9", "NP18")
)
# Extract the meta.features dataframe
meta_features <- seurat_subset[["RNA"]]@meta.features
# Ensure the rownames of meta.features match the rownames of the data
stopifnot(all(rownames(meta_features) == rownames(seurat_subset[["RNA"]]@data)))
# Get the 'name' column to use as new rownames
new_rownames <- meta_features$name
# Check for any issues (e.g., duplicates or missing names)
if (any(is.na(new_rownames))) {
stop("Some rows in 'meta.features' have missing 'name' values. Cannot update rownames.")
}
if (any(duplicated(new_rownames))) {
stop("Duplicate names found in the 'name' column. Rownames must be unique.")
}
# Update the rownames of the data
rownames(seurat_subset[["RNA"]]@data) <- new_rownames
# Define the new rownames
new_rownames <- seurat_subset@assays$RNA@meta.features$name
# Ensure that the length of new_rownames matches the current features
if (length(new_rownames) != nrow(seurat_subset[["RNA"]]@data)) {
stop("The length of new_rownames does not match the number of features.")
}
# Update rownames for all slots consistently
rownames(seurat_subset[["RNA"]]@counts) <- new_rownames
rownames(seurat_subset[["RNA"]]@meta.features) <- new_rownames
rownames(seurat_subset[["RNA"]]@data) <- new_rownames
# Update all relevant components together
assay <- seurat_subset[["RNA"]] # Access the RNA assay
rownames(assay@counts) <- new_rownames
rownames(assay@data) <- new_rownames
rownames(assay@scale.data) <- new_rownames
rownames(assay@meta.features) <- new_rownames
# Assign the updated assay back to the Seurat object
seurat_subset[["RNA"]] <- assay
pathgenes <- pathg(seurat_object = seurat_subset, cell_type = "CD4-positive helper T cell", top_n = 1000)
result <- BioGRID_Adj(pathgenes, biogrid_data)
wadjm <- result$weighted
adjm <- result$binary
common_names <- intersect(rownames(adjm), colnames(adjm))
adjm <- adjm[common_names, common_names, drop = FALSE]
print(dim(wadjm))
print(dim(adjm))
write.table(adjm, "./../analysis/adjm_p500n643.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
write.table(wadjm, "./../analysis/wadjm_p500n643.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
gtruth <- igraph::graph_from_adjacency_matrix(adjm, mode = "undirected", diag = FALSE)
num_nodes <- vcount(gtruth)
num_edges <- ecount(gtruth)
set.seed(1234)
p1 <- ggraph(gtruth, layout = "fr") +
geom_edge_link(color = "gray", width = 0.5) +  # Set edge color and width
geom_node_point(color = "steelblue", size = 0.7) +  # Set node color and size
labs(title = paste("Ground Truth\nNodes:", vcount(gtruth), "Edges:", ecount(gtruth))) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
)
ggsave("./../analysis/gtruth_top1000_s300.png", p1, width = 8, height = 6, dpi = 300, bg = "white")
class(expression_matrices)
seurat_split <- SplitObject(
object = seurat_subset,
split.by = "donor_id"
)
expression_matrices <- lapply(seurat_split, function(obj) {
GetAssayData(obj, assay = "RNA", layer = "counts") # Use `layer` instead of `slot`
})
names(expression_matrices) <- names(seurat_split)
str(expression_matrices)
expression_matrices
seq_len(expression_matrices)
length(expression_matrices)
knitr::opts_chunk$set(echo = TRUE)
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(GENIE3)
library(igraph)
library(ggraph)
library(pROC)
library(RColorBrewer)
library(scales)
library(gridExtra)
library(INetTool)
source("./../R/earlyj.R")
source("./../R/infer_networks.R")
source("./../R/generate_adjacency.R")
source("./../R/symmetrize.R")
source("./../R/plotROC.R")
source("./../R/cutoff_adjacency.R")
source("./../R/pscores.R")
source("./../R/plotg.R")
source("./../R/create_consensus.R")
source("./../R/compare_consensus.R")
time <- list()
ddir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/data"
pdir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/plots"
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
library(learn2count)
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
View(adjm)
knitr::opts_chunk$set(echo = TRUE)
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)
biogrid_data <- biogrid_data[, c("Official.Symbol.Interactor.A",
"Official.Symbol.Interactor.B",
"Score",
"Experimental.System.Type",
"Organism.Name.Interactor.A",
"Organism.Name.Interactor.B")]
names(biogrid_data) <- c("Interactor_A", "Interactor_B", "Score", "type", "org1", "org2")
biogrid_data <- biogrid_data %>%
mutate(Score = as.numeric(Score)) %>%
filter(type == "physical") %>%
filter(!is.na(Score)) %>%
filter(abs(Score) > 300) %>%
filter(org1 == "Homo sapiens" & org2 == "Homo sapiens")
write.table(biogrid_data, "biogrid_physical_s300.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
options(timeout = 600)
# PBMC Dataset: Local and systemic responses to SARS-CoV-2 infection in children and adults
seurat_url <- "https://datasets.cellxgene.cziscience.com/89619149-162f-4839-8e97-24735924417c.rds"
seurat_object <- download_Atlas(seurat_url)
knitr::opts_chunk$set(echo = TRUE)
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/francescoc/Desktop/GRN_project/data")
library(tidyverse)
library(biomaRt)
library(igraph)
library(learn2count)
library(ggraph)
library(Seurat)
source("./../R/download_Atlas.R")
source("./../R/pathg.R")
source("./../R/BioGRID_Adj.R")
setwd("/home/francescoc/Desktop/GRN_project/data")
library(tidyverse)
library(biomaRt)
library(igraph)
library(learn2count)
library(ggraph)
library(Seurat)
source("./../R/download_Atlas.R")
source("./../R/pathg.R")
source("./../R/BioGRID_Adj.R")
biogrid_data <- read.delim("/home/francescoc/Downloads/BIOGRID-ALL-4.4.241.tab3.txt", header = TRUE, stringsAsFactors = FALSE)
biogrid_data <- biogrid_data[, c("Official.Symbol.Interactor.A",
"Official.Symbol.Interactor.B",
"Score",
"Experimental.System.Type",
"Organism.Name.Interactor.A",
"Organism.Name.Interactor.B")]
names(biogrid_data) <- c("Interactor_A", "Interactor_B", "Score", "type", "org1", "org2")
biogrid_data <- biogrid_data %>%
mutate(Score = as.numeric(Score)) %>%
filter(type == "physical") %>%
filter(!is.na(Score)) %>%
filter(abs(Score) > 300) %>%
filter(org1 == "Homo sapiens" & org2 == "Homo sapiens")
write.table(biogrid_data, "biogrid_physical_s300.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
options(timeout = 600)
# PBMC Dataset: Local and systemic responses to SARS-CoV-2 infection in children and adults
seurat_url <- "https://datasets.cellxgene.cziscience.com/89619149-162f-4839-8e97-24735924417c.rds"
seurat_object <- download_Atlas(seurat_url)
seurat_subset <- subset(
x = seurat_object,
subset = disease == "normal" & cell_type == "CD4-positive helper T cell" & donor_id %in% c("AN6", "AN9", "NP18")
)
# Extract the meta.features dataframe
meta_features <- seurat_subset[["RNA"]]@meta.features
# Ensure the rownames of meta.features match the rownames of the data
stopifnot(all(rownames(meta_features) == rownames(seurat_subset[["RNA"]]@data)))
# Get the 'name' column to use as new rownames
new_rownames <- meta_features$name
# Define the new rownames
new_rownames <- seurat_subset@assays$RNA@meta.features$name
# Ensure that the length of new_rownames matches the current features
if (length(new_rownames) != nrow(seurat_subset[["RNA"]]@data)) {
stop("The length of new_rownames does not match the number of features.")
}
# Update all relevant components together
assay <- seurat_subset[["RNA"]] # Access the RNA assay
rownames(assay@counts) <- new_rownames
rownames(assay@data) <- new_rownames
rownames(assay@meta.features) <- new_rownames
# Assign the updated assay back to the Seurat object
seurat_subset[["RNA"]] <- assay
seurat_split <- SplitObject(
object = seurat_subset,
split.by = "donor_id"
)
expression_matrices <- lapply(seurat_split, function(obj) {
GetAssayData(obj, assay = "RNA", layer = "counts") # Use `layer` instead of `slot`
})
names(expression_matrices) <- names(seurat_split)
str(expression_matrices)
saveRDS(expression_matrices, "PBMC.top1000.RDS")
pathgenes <- pathg(seurat_object = seurat_subset, cell_type = "CD4-positive helper T cell", top_n = 1000)
result <- BioGRID_Adj(pathgenes, biogrid_data)
wadjm <- result$weighted
adjm <- result$binary
common_names <- intersect(rownames(adjm), colnames(adjm))
adjm <- adjm[common_names, common_names, drop = FALSE]
print(dim(wadjm))
print(dim(adjm))
write.table(adjm, "./../analysis/adjm_p500n643.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
write.table(wadjm, "./../analysis/wadjm_p500n643.txt", sep = "\t", quote = FALSE, col.names = TRUE, row.names = TRUE)
is_symmetric <- all(adj_matrix == t(adj_matrix))
all(adjm == t(adjm))
all(adjm == t(adjm))
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
library(GENIE3)
library(igraph)
library(ggraph)
library(pROC)
library(RColorBrewer)
library(scales)
library(gridExtra)
library(INetTool)
library(learn2count)
source("./../R/earlyj.R")
source("./../R/infer_networks.R")
source("./../R/generate_adjacency.R")
source("./../R/symmetrize.R")
source("./../R/plotROC.R")
source("./../R/cutoff_adjacency.R")
source("./../R/pscores.R")
source("./../R/plotg.R")
source("./../R/create_consensus.R")
source("./../R/compare_consensus.R")
time <- list()
ddir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/data"
pdir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/plots"
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
class(adjm)
dim(adjm)
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = as.data.frame(adjm), family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
# Symmetrize the binary adjacency matrix
adjm <- (adjm | t(adjm)) * 1
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
nodes
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
# Symmetrize the binary adjacency matrix
adjm <- (adjm | t(adjm)) * 1
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
# Read and symmetrize the adjacency matrix
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
adjm <- (adjm | t(adjm)) * 1
# Set parameters for simulation
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)  # Set seed for reproducibility
# Define parameters for different simulations
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
# Simulate count matrices
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)  # Set a unique seed for each simulation
mu_i <- mu_values[i]
theta_i <- theta_values[i]
# Simulate count data
simdata(
n = ncell,
p = nodes,
B = adjm,
family = "ZINB",  # Zero-Inflated Negative Binomial distribution
mu = mu_i,
mu_noise = 1,
theta = theta_i,
pi = 0.2
)
})
dim(adjm)
length(unique(rownames(adjm)))
length(unique(colnames(adjm)))
# Read and symmetrize the adjacency matrix
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
adjm <- (adjm | t(adjm)) * 1
# Set parameters for simulation
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)  # Set seed for reproducibility
# Define parameters for different simulations
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
# Simulate count matrices
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)  # Set a unique seed for each simulation
mu_i <- mu_values[i]
theta_i <- theta_values[i]
# Simulate count data
simdata(
n = ncell,
p = nodes,
B = adjm,
family = "ZINB",  # Zero-Inflated Negative Binomial distribution
mu = mu_i,
mu_noise = 1,
theta = theta_i,
pi = 0.2
)
})
# Check dimensions
if (nrow(adjm) != ncol(adjm)) {
stop("The adjacency matrix is not square.")
}
# Check if binary
if (!all(adjm %in% c(0, 1))) {
stop("The adjacency matrix contains non-binary values.")
}
# Read and symmetrize the adjacency matrix
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
adjm <- (adjm | t(adjm)) * 1
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
adjm
View(adjm)
diag(adjm) <- 0
# Read and symmetrize the adjacency matrix
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
diag(adjm) <- 0
ncell <- 500
nodes <- nrow(adjm)
set.seed(1130)
mu_values <- c(3, 6, 9)
theta_values <- c(1, 0.7, 0.5)
count_matrices <- lapply(1:3, function(i) {
set.seed(1130 + i)
mu_i <- mu_values[i]
theta_i <- theta_values[i]
count_matrix_i <- simdata(n = ncell, p = nodes, B = adjm, family = "ZINB",
mu = mu_i, mu_noise = 1, theta = theta_i, pi = 0.2)
count_matrix_df <- as.data.frame(count_matrix_i)
colnames(count_matrix_df) <- colnames(adjm)
rownames(count_matrix_df) <- paste("cell", 1:nrow(count_matrix_df), sep = "")
return(count_matrix_df)
})
setwd("/home/francescoc/Desktop/GRN_project/data")
library(tidyverse)
library(GENIE3)
library(igraph)
library(ggraph)
library(pROC)
library(RColorBrewer)
library(scales)
library(gridExtra)
library(INetTool)
source("./../R/earlyj.R")
source("./../R/infer_networks.R")
source("./../R/generate_adjacency.R")
source("./../R/symmetrize.R")
source("./../R/plotROC.R")
source("./../R/cutoff_adjacency.R")
source("./../R/pscores.R")
source("./../R/plotg.R")
source("./../R/create_consensus.R")
source("./../R/compare_consensus.R")
time <- list()
ddir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/data"
pdir <- "/home/francescoc/Desktop/GRN_project/analysis/GENIE3/plots"
adjm <- as.matrix(read.table("./../analysis/adjm_n500p643.txt"))
count_matrices <- readRDS("./../analysis/count_matrices_n500xp643.RDS")
dim(count_matrices[[1]])
