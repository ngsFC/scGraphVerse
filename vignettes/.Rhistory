# Ensure Python anndata is installed
if (!reticulate::py_module_available("anndata")) {
reticulate::py_install("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# Download to a temp file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata <- adata_mod$read_h5ad(tmpfile)
counts_mat <- t(adata$X)
# 2) Grab gene- and cell-names, coerce to plain character
gene_names <- as.character(reticulate::py_to_r(adata$var_names))
cell_names <- as.character(reticulate::py_to_r(adata$obs_names))
# 3) Assign them as dimnames on the counts matrix
dimnames(counts_mat) <- list(gene_names, cell_names)
meta_df    <- reticulate::py_to_r(adata$obs)
if (output == "seurat") {
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
} else {
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
coldata    <- S4Vectors::DataFrame(meta_df)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(scGraphVerse)
library(Seurat)
library(tidyverse)
options(timeout = 2000)
seurat_url <- "https://datasets.cellxgene.cziscience.com/fb338c4d-e63a-4b17-abd6-1032a66c8886.h5ad"
seurat_object <- download_Atlas(url=seurat_url, output="sce")
seurat_url <- "https://datasets.cellxgene.cziscience.com/84bf2cf0-1944-499e-a22e-fe998f6198b2.h5ad"
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(seurat_url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata_mod <- reticulate::import("anndata")
adata <- adata_mod$read_h5ad(tmpfile)
counts_mat <- t(adata$X)
meta_df    <- reticulate::py_to_r(adata$obs)
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
adata_mod <- reticulate::import("anndata")
adata <- adata_mod$read_h5ad(tmpfile)
counts_mat <- t(adata$X)
# 2) Grab gene- and cell-names, coerce to plain character
gene_names <- as.character(reticulate::py_to_r(adata$var_names))
cell_names <- as.character(reticulate::py_to_r(adata$obs_names))
gene_names
cell_names
# 3) Assign them as dimnames on the counts matrix
dimnames(counts_mat) <- list(gene_names, cell_names)
rownames(counts_mat)
head(counts_mat)
class(counts_mat)
gene_names
adata <- adata_mod$read_h5ad(tmpfile)
# Extract names as a true Python list, then convert & flatten
gene_names_py <- adata$var_names$tolist()    # pandas Index → Python list of strings
cell_names_py <- adata$obs_names$tolist()
# Now bring them into R and unlist to a plain character vector
gene_names <- unlist(reticulate::py_to_r(gene_names_py), use.names = FALSE)
cell_names <- unlist(reticulate::py_to_r(cell_names_py), use.names = FALSE)
gene_names
# Quick sanity‐check
stopifnot(length(gene_names) == nrow(counts_mat),
length(cell_names) == ncol(counts_mat))
# And now assign
dimnames(counts_mat) <- list(gene_names, cell_names)
#'   output = "sce"
#' )
#'
#' @import reticulate
#' @importFrom utils download.file
#' @importFrom Seurat CreateSeuratObject
#' @importFrom SingleCellExperiment SingleCellExperiment
#' @importFrom S4Vectors DataFrame
#' @importFrom Matrix Matrix
#' @export
download_Atlas <- function(
url,
output       = c("seurat", "sce"),
min.features = 500,
min.cells    = 30
) {
output <- match.arg(output)
# Ensure Python anndata is installed
if (!reticulate::py_module_available("anndata")) {
reticulate::py_install("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# Download to a temp file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata <- adata_mod$read_h5ad(tmpfile)
counts_mat <- t(adata$X)
gene_names_py <- adata$var_names$tolist()
cell_names_py <- adata$obs_names$tolist()
gene_names <- unlist(reticulate::py_to_r(gene_names_py), use.names = FALSE)
cell_names <- unlist(reticulate::py_to_r(cell_names_py), use.names = FALSE)
stopifnot(length(gene_names) == nrow(counts_mat),
length(cell_names) == ncol(counts_mat))
dimnames(counts_mat) <- list(gene_names, cell_names)
meta_df    <- reticulate::py_to_r(adata$obs)
if (output == "seurat") {
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
} else {
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
coldata    <- S4Vectors::DataFrame(meta_df)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
#'   output = "sce"
#' )
#'
#' @import reticulate
#' @importFrom utils download.file
#' @importFrom Seurat CreateSeuratObject
#' @importFrom SingleCellExperiment SingleCellExperiment
#' @importFrom S4Vectors DataFrame
#' @importFrom Matrix Matrix
#' @export
download_Atlas <- function(
url,
output       = c("seurat", "sce"),
min.features = 500,
min.cells    = 30
) {
output <- match.arg(output)
# Ensure Python anndata is installed
if (!reticulate::py_module_available("anndata")) {
reticulate::py_install("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# Download to a temp file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata <- adata_mod$read_h5ad(tmpfile)
counts_mat <- t(adata$X)
gene_names_py <- adata$var_names$tolist()
cell_names_py <- adata$obs_names$tolist()
gene_names <- unlist(reticulate::py_to_r(gene_names_py), use.names = FALSE)
cell_names <- unlist(reticulate::py_to_r(cell_names_py), use.names = FALSE)
stopifnot(length(gene_names) == nrow(counts_mat),
length(cell_names) == ncol(counts_mat))
dimnames(counts_mat) <- list(gene_names, cell_names)
meta_df    <- reticulate::py_to_r(adata$obs)
if (output == "seurat") {
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
} else {
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
coldata    <- S4Vectors::DataFrame(meta_df)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(scGraphVerse)
library(Seurat)
library(tidyverse)
seurat_url <- "https://datasets.cellxgene.cziscience.com/fb338c4d-e63a-4b17-abd6-1032a66c8886.h5ad"
seurat_object <- download_Atlas(url=seurat_url, output="sce")
seurat_object@colData
seurat_object@metadata
seurat_object@assays@data$counts
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(seurat_url, destfile = tmpfile, mode = "wb", quiet = TRUE)
library(scGraphVerse)
seurat_url <- "https://datasets.cellxgene.cziscience.com/84bf2cf0-1944-499e-a22e-fe998f6198b2.h5ad"
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(seurat_url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata_mod <- reticulate::import("anndata")
adata_mod <- reticulate::import("anndata")
reticulate::py_install("anndata", pip = TRUE)
reticulate::py_last_error()reticulate::py_module_available("anndata")
reticulate::py_module_available("anndata")
## [1] TRUE
adata_mod <- reticulate::import("anndata")
adata_mod <- reticulate::import("anndata")
# Download to a temp file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata_mod <- reticulate::import("anndata")
adata <- adata_mod$read_h5ad(tmpfile)
seurat_url <- "https://datasets.cellxgene.cziscience.com/84bf2cf0-1944-499e-a22e-fe998f6198b2.h5ad"
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(seurat_url, destfile = tmpfile, mode = "wb", quiet = TRUE)
adata_mod <- reticulate::import("anndata")
adata <- adata_mod$read_h5ad(tmpfile)
# Extract names as a true Python list, then convert & flatten
gene_names_py <- adata$var_names$tolist()    # pandas Index → Python list of strings
adata$var_keys()
adata$var_keys$ls
adata$var_keys$ls()
adata$var_keys
as.data.frame(adata$var_keys)
adata$var_keys
adata$var_keys
adata$var_names
adata$var_names
adata$var_names_make_unique()
adata$var_names_make_unique
adata$var_vector()
adata$var_vector
adata$var
adata$var$feature_name
adata$var$feature_is_filtered
adata$var$feature_biotype
adata$varm
adata$varm_keys()
adata$varm_keys
adata$varp
adata$var$feature_name
#' a \code{\link[SingleCellExperiment]{SingleCellExperiment-class}} object if
#' \code{output = "sce"}.
#'
#' @import reticulate
#' @importFrom utils download.file
#' @importFrom Seurat CreateSeuratObject
#' @importFrom SingleCellExperiment SingleCellExperiment
#' @importFrom S4Vectors DataFrame
#' @importFrom Matrix Matrix
#' @export
download_Atlas <- function(
url,
output       = c("seurat", "sce"),
min.features = 500,
min.cells    = 30
) {
output <- match.arg(output)
# ensure anndata is installed in the current reticulate env
if (!reticulate::py_module_available("anndata")) {
reticulate::py_require("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# download file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
# read AnnData
adata <- adata_mod$read_h5ad(tmpfile)
# raw counts: cells × genes → transpose → genes × cells
counts_mat <- reticulate::py_to_r(adata$X)
counts_mat <- t(counts_mat)
# pull out feature_name column (a pandas Index/DataFrame field) as a Python list
gene_names_py <- adata$var$feature_name$tolist()
cell_names_py <- adata$obs_names$tolist()
# convert to plain R character vectors
gene_names <- unlist(reticulate::py_to_r(gene_names_py), use.names = FALSE)
cell_names <- unlist(reticulate::py_to_r(cell_names_py), use.names = FALSE)
# strip off any trailing "_ENSG..." so only the gene symbol remains
gene_names <- sub("_ENSG.*$", "", gene_names)
# sanity‐check dims
if (length(gene_names) != nrow(counts_mat) ||
length(cell_names) != ncol(counts_mat)) {
stop(
"Dimension mismatch: ",
length(gene_names), " genes vs ", nrow(counts_mat), " rows; ",
length(cell_names), " cells vs ", ncol(counts_mat), " columns."
)
}
# assign dimnames
dimnames(counts_mat) <- list(gene_names, cell_names)
# metadata
meta_df <- reticulate::py_to_r(adata$obs)
rownames(meta_df) <- cell_names
if (output == "seurat") {
# build Seurat
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
} else {
# build SingleCellExperiment
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
dimnames(sparse_mat) <- list(gene_names, cell_names)
coldata <- S4Vectors::DataFrame(meta_df)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(scGraphVerse)
library(Seurat)
library(tidyverse)
seurat_url <- "https://datasets.cellxgene.cziscience.com/fb338c4d-e63a-4b17-abd6-1032a66c8886.h5ad"
seurat_object <- download_Atlas(url=seurat_url, output="sce")
#' a \code{\link[SingleCellExperiment]{SingleCellExperiment-class}} object if
#' \code{output = "sce"}.
#'
#' @import reticulate
#' @importFrom utils download.file
#' @importFrom Seurat CreateSeuratObject
#' @importFrom SingleCellExperiment SingleCellExperiment
#' @importFrom S4Vectors DataFrame
#' @importFrom Matrix Matrix
#' @export
download_Atlas <- function(
url,
output       = c("seurat", "sce"),
min.features = 500,
min.cells    = 30
) {
output <- match.arg(output)
# 1) Make sure 'anndata' is installed in your reticulate env
if (!reticulate::py_module_available("anndata")) {
reticulate::py_require("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# 2) Download the .h5ad to a temp file
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
# 3) Read the AnnData
adata <- adata_mod$read_h5ad(tmpfile)
# 4) Extract the raw count matrix and transpose to genes × cells
counts_mat <- reticulate::py_to_r(adata$X)
counts_mat <- t(counts_mat)
# 5) Convert obs → R data.frame; grab cell names from rownames
meta_obs <- reticulate::py_to_r(adata$obs)
cell_names <- rownames(meta_obs)
# 6) Convert var → R data.frame; pull out the 'feature_name' column
var_df <- reticulate::py_to_r(adata$var)
gene_names <- as.character(var_df$feature_name)
# 7) Strip off any trailing "_ENSG..." so only the symbol remains
gene_names <- sub("_ENSG.*$", "", gene_names)
# 8) Sanity-check that lengths match
if (length(gene_names) != nrow(counts_mat) ||
length(cell_names) != ncol(counts_mat)) {
stop(
"Dimension mismatch:\n",
"  ", length(gene_names), " gene names vs ", nrow(counts_mat), " rows\n",
"  ", length(cell_names), " cell names vs ", ncol(counts_mat), " columns"
)
}
# 9) Assign dimnames
dimnames(counts_mat) <- list(gene_names, cell_names)
# 10) Ensure metadata rownames line up
rownames(meta_obs) <- cell_names
# 11) Build the requested object
if (output == "seurat") {
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_obs,
min.features = min.features,
min.cells    = min.cells
)
} else {
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
dimnames(sparse_mat) <- list(gene_names, cell_names)
coldata <- S4Vectors::DataFrame(meta_obs)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
seurat_object <- download_Atlas(url=seurat_url, output="sce")
seurat_object@assays@data$counts
adata$obs
adata$n_vars
adata$obs_names
adata$raw
adata$uns_keys()
adata$X
adata$varp
adata$var$feature_name
adata$var$feature_name
#' \code{output = "sce"}.
#'
#' @import reticulate
#' @importFrom utils download.file
#' @importFrom biomaRt useEnsembl getBM
#' @importFrom Seurat CreateSeuratObject
#' @importFrom SingleCellExperiment SingleCellExperiment
#' @importFrom S4Vectors DataFrame
#' @importFrom Matrix Matrix
#' @export
download_Atlas <- function(
url,
output       = c("seurat", "sce"),
min.features = 500,
min.cells    = 30
) {
output <- match.arg(output)
# --- 1) ensure Python anndata is installed/importable
if (!reticulate::py_module_available("anndata")) {
reticulate::py_require("anndata", pip = TRUE)
}
adata_mod <- reticulate::import("anndata")
# --- 2) download .h5ad
tmpfile <- tempfile(fileext = ".h5ad")
on.exit(unlink(tmpfile), add = TRUE)
utils::download.file(url, destfile = tmpfile, mode = "wb", quiet = TRUE)
# --- 3) read AnnData
adata <- adata_mod$read_h5ad(tmpfile)
# --- 4) pull raw counts and transpose (genes × cells)
counts_mat <- reticulate::py_to_r(adata$X)
counts_mat <- t(counts_mat)
# --- 5) grab Ensembl IDs (genes) and cell barcodes
ensembl_ids_py <- adata$var_names$tolist()
cell_barcodes_py <- adata$obs_names$tolist()
ensembl_ids   <- unlist(reticulate::py_to_r(ensembl_ids_py),   use.names = FALSE)
cell_barcodes <- unlist(reticulate::py_to_r(cell_barcodes_py), use.names = FALSE)
# --- 6) map Ensembl -> HGNC via biomaRt
mart <- biomaRt::useEnsembl(
biomart  = "genes",
dataset  = "hsapiens_gene_ensembl",
version  = NULL
)
mapping_df <- biomaRt::getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters    = "ensembl_gene_id",
values     = ensembl_ids,
mart       = mart
)
# make a named vector: ensembl_id -> symbol (or blank)
sym_map <- setNames(mapping_df$hgnc_symbol, mapping_df$ensembl_gene_id)
# build final gene names vector: if no symbol, keep the Ensembl ID
gene_names <- ifelse(
nzchar(sym_map[ensembl_ids]),
sym_map[ensembl_ids],
ensembl_ids
)
# --- 7) sanity checks
if (length(gene_names) != nrow(counts_mat) ||
length(cell_barcodes) != ncol(counts_mat)) {
stop(
"Dimension mismatch:\n",
"  Got ", length(gene_names), " gene names vs ", nrow(counts_mat), " rows\n",
"  Got ", length(cell_barcodes), " cell barcodes vs ", ncol(counts_mat), " columns"
)
}
# --- 8) assign dimnames
dimnames(counts_mat) <- list(gene_names, cell_barcodes)
# --- 9) pull metadata & align
meta_df <- reticulate::py_to_r(adata$obs)
rownames(meta_df) <- cell_barcodes
# --- 10) build Seurat or SCE
if (output == "seurat") {
obj <- Seurat::CreateSeuratObject(
counts       = counts_mat,
meta.data    = meta_df,
min.features = min.features,
min.cells    = min.cells
)
} else {
sparse_mat <- Matrix::Matrix(counts_mat, sparse = TRUE)
dimnames(sparse_mat) <- list(gene_names, cell_barcodes)
coldata <- S4Vectors::DataFrame(meta_df)
obj <- SingleCellExperiment::SingleCellExperiment(
assays  = list(counts = sparse_mat),
colData = coldata
)
}
obj
}
seurat_url <- "https://datasets.cellxgene.cziscience.com/fb338c4d-e63a-4b17-abd6-1032a66c8886.h5ad"
seurat_object <- download_Atlas(url=seurat_url, output="sce")
seurat_url <- "https://datasets.cellxgene.cziscience.com/fb338c4d-e63a-4b17-abd6-1032a66c8886.h5ad"
seurat_object <- download_Atlas(url=seurat_url, output="sce")
