[{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"vignette demonstrates scGraphVerse workflow two-sample B-cell single-cell RNA-seq dataset. show : Load preprocess public PBMC data. Infer gene regulatory networks withJRF. Build consensus networks detect communities. Validate inferred edges using STRINGdb.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"dataset-and-preprocessing","dir":"Articles","previous_headings":"","what":"1. Dataset and Preprocessing","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"use two public PBMC Seurat objects containing whole-blood samples. goal focus healthy B cells common gene set.","code":"urls <- list(     url1 = paste0(         \"https://www.dropbox.com/s/r8qwsng79rhp9gf/\",         \"SCA_scRNASEQ_TISSUE_WHOLE_BLOOD.RDS?dl=1\"     ),     url2 = paste0(         \"https://www.dropbox.com/s/grt5371v5qarn54/\",         \"SCA_scRNASEQ_TISSUE_BLOOD.RDS?dl=1\"     ) ) # Load Seurat objects pbmc1 <- download_Atlas(file_url = urls[[1]]) pbmc2 <- download_Atlas(file_url = urls[[2]])  # Select top variable genes for B cells, removing ribosomal/mitochondrial genes1 <- selgene(pbmc1,     top_n = 150,     cell_type = \"B_cell\",     cell_type_col = \"CELL_TYPE\",     remove_rib = TRUE,     remove_mt = TRUE ) #> Using Seurat assay 'RNA' slot 'data' (log-normalized). #> Subsetted to 197 cells where CELL_TYPE = 'B_cell'. #> Removed mitochondrial genes matching '^MT-'. #> Removed ribosomal genes matching '^RP[SL]'. #> Top 150 genes selected based on mean expression. genes2 <- selgene(pbmc2,     top_n = 150,     cell_type = \"B_cell\",     cell_type_col = \"CELL_TYPE\",     remove_rib = TRUE,     remove_mt = TRUE ) #> Using Seurat assay 'RNA' slot 'data' (log-normalized). #> Subsetted to 369 cells where CELL_TYPE = 'B_cell'. #> Removed mitochondrial genes matching '^MT-'. #> Removed ribosomal genes matching '^RP[SL]'. #> Top 150 genes selected based on mean expression.  # Intersection of gene sets and subset common_genes <- intersect(genes1, genes2) pbmc1_sub <- subset(pbmc1, features = common_genes) pbmc2_sub <- subset(pbmc2, features = common_genes)  # Filter to B cells b1 <- subset(pbmc1_sub, subset = CELL_TYPE == \"B_cell\") b2 <- subset(pbmc2_sub, subset = CELL_TYPE == \"B_cell\")  # List for multi-sample analysis bcell_list <- list(b1, b2)"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"network-inference","dir":"Articles","previous_headings":"","what":"2. Network Inference","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"infer GRNs using three algorithms. Replace method switch.","code":"# Choose method: \"GENIE3\", \"GRNBoost2\", or \"JRF\" method <- \"GENIE3\" networks <- infer_networks(     count_matrices_list = bcell_list,     method = method,     nCores = 10 ) #> Warning: The `slot` argument of `GetAssayData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the scGraphVerse package. #>   Please report the issue at #>   <https://github.com/francesco-cecere/scGraphVerse/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"building-adjacency-matrices","dir":"Articles","previous_headings":"2. Network Inference","what":"2.1. Building Adjacency Matrices","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"Convert edge lists weighted matrices, symmetrize, apply threshold.","code":"# Weighted adjacency wadj <- generate_adjacency(networks) # Symmetrize swadj <- symmetrize(wadj, weight_function = \"mean\") # Binary cutoff (top 5%) binary_adj <- cutoff_adjacency(     count_matrices = bcell_list,     weighted_adjm_list = swadj,     n = 2,     method = method,     quantile_threshold = 0.95,     nCores = 10 ) # Plot plotg(binary_adj)"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"consensus-and-community-detection","dir":"Articles","previous_headings":"","what":"3. Consensus and Community Detection","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"Aggregate multiple binary networks consensus find network modules.","code":"# Consensus by vote consensus <- create_consensus(binary_adj, method = \"vote\") plotg(list(consensus)) compare_consensus(consensus_matrix = consensus, false_plot = TRUE) #> Initializing STRINGdb... #> Mapping genes to STRING IDs... #> Mapped 116 genes to STRING IDs. #> Retrieving physical interactions from STRING API... #> Found 71 STRING physical interactions. #> Adjacency matrices constructed successfully. # Community detection communities <- community_path(consensus) #> Detecting communities... #> Running pathway enrichment... #> 'select()' returned 1:1 mapping between keys and columns #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"validation-with-stringdb","dir":"Articles","previous_headings":"","what":"4. Validation with STRINGdb","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"Fetch high-confidence interactions STRING evaluate true positives.","code":"str <- stringdb_adjacency(     genes = rownames(consensus),     species = 9606,     required_score = 900,     keep_all_genes = TRUE )$binary #> Initializing STRINGdb... #> Mapping genes to STRING IDs... #> Mapped 116 genes to STRING IDs. #> Retrieving physical interactions from STRING API... #> Found 71 STRING physical interactions. #> Adjacency matrices constructed successfully. ground_truth <- symmetrize(list(str), weight_function = \"mean\")[[1]]  # Edge mining: TP rates em <- edge_mining(list(consensus),     query_edge_types = \"TP\",     ground_truth = ground_truth )"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"5. Conclusion","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"case study illustrates scGraphVerse enables end--end GRN reconstruction validation single-cell data. Users can swap inference algorithms, tune thresholds, incorporate external prior networks.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/articles/case_study.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"scGraphVerse Case Study: B-cell GRN Reconstruction","text":"","code":"sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 20.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=it_IT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=it_IT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=it_IT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=it_IT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Rome #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] doRNG_1.8.6.2      rngtools_1.5.2     foreach_1.5.2      lubridate_1.9.4    #>  [5] forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4        purrr_1.0.4        #>  [9] readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.2      #> [13] tidyverse_2.0.0    Seurat_5.3.0       SeuratObject_5.1.0 sp_2.2-0           #> [17] scGraphVerse_0.1.0 BiocStyle_2.34.0   #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.40.1              R.methodsS3_1.8.2           #>   [3] gld_2.6.7                   goftest_1.2-3               #>   [5] Biostrings_2.74.1           vctrs_0.6.5                 #>   [7] ggtangle_0.0.6              spatstat.random_3.3-3       #>   [9] perturbR_0.1.3              proxy_0.4-27                #>  [11] digest_0.6.37               png_0.1-8                   #>  [13] Exact_3.3                   pcaPP_2.0-5                 #>  [15] ggrepel_0.9.6               deldir_2.0-4                #>  [17] parallelly_1.43.0           hdrcde_3.4                  #>  [19] MASS_7.3-54                 pkgdown_2.1.2               #>  [21] reshape2_1.4.4              httpuv_1.6.16               #>  [23] BiocGenerics_0.52.0         qvalue_2.38.0               #>  [25] withr_3.0.2                 xfun_0.52                   #>  [27] ggfun_0.1.8                 ggpubr_0.6.0                #>  [29] survival_3.2-11             memoise_2.0.1               #>  [31] clusterProfiler_4.14.6      gson_0.1.0                  #>  [33] systemfonts_1.2.2           networkD3_0.4.1             #>  [35] ragg_1.4.0                  tidytree_0.4.6              #>  [37] zoo_1.8-14                  gtools_3.9.5                #>  [39] pbapply_1.7-2               R.oo_1.27.0                 #>  [41] Formula_1.2-6               KEGGREST_1.46.0             #>  [43] promises_1.3.2              httr_1.4.7                  #>  [45] GENIE3_1.28.0               rstatix_0.7.2               #>  [47] globals_0.17.0              hash_2.2.6.3                #>  [49] fitdistrplus_1.2-2          fmsb_0.7.6                  #>  [51] rstudioapi_0.17.1           UCSC.utils_1.2.0            #>  [53] miniUI_0.1.2                generics_0.1.3              #>  [55] DOSE_4.0.1                  reactome.db_1.89.0          #>  [57] curl_6.2.2                  S4Vectors_0.44.0            #>  [59] zlibbioc_1.52.0             ggraph_2.2.1                #>  [61] polyclip_1.10-7             GenomeInfoDbData_1.2.13     #>  [63] SparseArray_1.6.2           xtable_1.8-4                #>  [65] desc_1.4.3                  pracma_2.4.4                #>  [67] doParallel_1.0.17           evaluate_1.0.3              #>  [69] S4Arrays_1.6.0              hms_1.1.3                   #>  [71] GenomicRanges_1.58.0        bookdown_0.43               #>  [73] irlba_2.3.5.1               colorspace_2.1-1            #>  [75] ROCR_1.0-11                 readxl_1.4.5                #>  [77] reticulate_1.42.0           spatstat.data_3.1-6         #>  [79] magrittr_2.0.3              lmtest_0.9-40               #>  [81] later_1.4.2                 viridis_0.6.5               #>  [83] ggtree_3.14.0               lattice_0.20-44             #>  [85] spatstat.geom_3.3-6         future.apply_1.11.3         #>  [87] scattermore_1.2             XML_3.99-0.18               #>  [89] cowplot_1.1.3               matrixStats_1.5.0           #>  [91] RcppAnnoy_0.0.22            class_7.3-19                #>  [93] pillar_1.10.2               nlme_3.1-152                #>  [95] iterators_1.0.14            caTools_1.18.3              #>  [97] compiler_4.4.2              RSpectra_0.16-2             #>  [99] stringi_1.8.7               DescTools_0.99.60           #> [101] tensor_1.5                  SummarizedExperiment_1.36.0 #> [103] plyr_1.8.9                  fda_6.2.0                   #> [105] crayon_1.5.3                abind_1.4-8                 #> [107] gridGraphics_0.5-1          chron_2.3-62                #> [109] haven_2.5.4                 graphlayouts_1.2.2          #> [111] org.Hs.eg.db_3.20.0         bit_4.6.0                   #> [113] rootSolve_1.8.2.4           fastmatch_1.1-6             #> [115] codetools_0.2-18            textshaping_1.0.0           #> [117] bslib_0.9.0                 e1071_1.7-16                #> [119] lmom_3.2                    fds_1.8                     #> [121] plotly_4.10.4               mime_0.13                   #> [123] multinet_4.2.2              splines_4.4.2               #> [125] Rcpp_1.0.14                 fastDummies_1.7.5           #> [127] cellranger_1.1.0            datastructures_0.2.9        #> [129] knitr_1.50                  blob_1.2.4                  #> [131] robin_2.1.0                 fs_1.6.6                    #> [133] listenv_0.9.1               expm_1.0-0                  #> [135] ggsignif_0.6.4              ggplotify_0.1.2             #> [137] sqldf_0.4-11                Matrix_1.7-3                #> [139] tzdb_0.5.0                  tweenr_2.0.3                #> [141] pkgconfig_2.0.3             tools_4.4.2                 #> [143] cachem_1.1.0                RSQLite_2.3.9               #> [145] viridisLite_0.4.2           DBI_1.2.3                   #> [147] distributions3_0.2.2        graphite_1.52.0             #> [149] fastmap_1.2.0               rmarkdown_2.29              #> [151] scales_1.3.0                grid_4.4.2                  #> [153] ica_1.0-3                   broom_1.0.8                 #> [155] sass_0.4.10                 patchwork_1.3.0             #> [157] INetTool_0.1.0              BiocManager_1.30.25         #> [159] dotCall64_1.2               graph_1.84.1                #> [161] carData_3.0-5               RANN_2.6.2                  #> [163] farver_2.1.2                tidygraph_1.3.1             #> [165] gsubfn_0.7                  yaml_2.3.10                 #> [167] deSolve_1.40                MatrixGenerics_1.18.1       #> [169] cli_3.6.5                   stats4_4.4.2                #> [171] lifecycle_1.0.4             askpass_1.2.1               #> [173] uwot_0.2.3                  Biobase_2.66.0              #> [175] rainbow_3.8                 mvtnorm_1.3-3               #> [177] backports_1.5.0             BiocParallel_1.40.2         #> [179] timechange_0.3.0            gtable_0.3.6                #> [181] ggridges_0.5.6              progressr_0.15.1            #> [183] parallel_4.4.2              pROC_1.18.5                 #> [185] ape_5.8-1                   jsonlite_2.0.0              #> [187] RcppHNSW_0.6.0              bitops_1.0-9                #> [189] bit64_4.6.0-1               Rtsne_0.17                  #> [191] yulab.utils_0.2.0           ReactomePA_1.50.0           #> [193] spatstat.utils_3.1-3        proto_1.0.0                 #> [195] jquerylib_0.1.4             GOSemSim_2.32.0             #> [197] spatstat.univar_3.1-2       R.utils_2.13.0              #> [199] lazyeval_0.2.2              shiny_1.10.0                #> [201] htmltools_0.5.8.1           enrichplot_1.26.6           #> [203] GO.db_3.20.0                sctransform_0.4.1           #> [205] data.tree_1.1.0             rappdirs_0.3.3              #> [207] glue_1.8.0                  STRINGdb_2.18.0             #> [209] spam_2.11-1                 XVector_0.46.0              #> [211] qpdf_1.3.5                  RCurl_1.98-1.17             #> [213] treeio_1.30.0               mclust_6.1.1                #> [215] ks_1.14.3                   gridExtra_2.3               #> [217] boot_1.3-28                 igraph_2.1.4                #> [219] R6_2.6.1                    fdatest_2.1.1               #> [221] SingleCellExperiment_1.28.1 gplots_3.2.0                #> [223] labeling_0.4.3              cluster_2.1.2               #> [225] aplot_0.2.5                 GenomeInfoDb_1.42.3         #> [227] DelayedArray_0.32.0         tidyselect_1.2.1            #> [229] plotrix_3.8-4               ggforce_0.4.2               #> [231] car_3.1-3                   AnnotationDbi_1.68.0        #> [233] future_1.40.0               munsell_0.5.1               #> [235] KernSmooth_2.23-20          data.table_1.17.0           #> [237] htmlwidgets_1.6.4           fgsea_1.32.4                #> [239] RColorBrewer_1.1-3          rlang_1.1.6                 #> [241] spatstat.sparse_3.1-0       spatstat.explore_3.4-2      #> [243] rentrez_1.2.3"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"simulation-study","dir":"Articles","previous_headings":"","what":"Simulation study","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"case study, use scGraphVerse : Define ground-truth regulatory network high-confidence interactions. Simulate zero-inflated scRNA-seq count data respects ground truth. Infer gene regulatory networks using JRF. Evaluate performance ROC curves, precision–recall scores, community similarity. Build consensus networks perform edge mining.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"defining-a-ground-truth-network-from-stringdb","dir":"Articles","previous_headings":"","what":"1. Defining a Ground-Truth Network from STRINGdb","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"select 500 top-variable T-cell genes fetch high-confidence edges (score ≥ 900) STRINGdb ground truth.","code":"# 1. Download PBMC data url <- paste0(     \"https://www.dropbox.com/s/r8qwsng79rhp9gf/\",     \"SCA_scRNASEQ_TISSUE_WHOLE_BLOOD.RDS?dl=1\" ) seu <- download_Atlas(file_url = url)  # 2. Select top 500 T-cell genes genes <- selgene(     object = seu,     top_n = 500,     cell_type = \"T_cells\",     cell_type_col = \"CELL_TYPE\",     remove_rib = TRUE,     remove_mt = TRUE ) #> Using Seurat assay 'RNA' slot 'data' (log-normalized). #> Subsetted to 923 cells where CELL_TYPE = 'T_cells'. #> Removed mitochondrial genes matching '^MT-'. #> Removed ribosomal genes matching '^RP[SL]'. #> Top 500 genes selected based on mean expression.  # 3. Retrieve STRINGdb adjacency str_res <- stringdb_adjacency(     genes = genes,     species = 9606,     required_score = 900,     keep_all_genes = FALSE ) #> Initializing STRINGdb... #> Mapping genes to STRING IDs... #> Mapped 500 genes to STRING IDs. #> Retrieving physical interactions from STRING API... #> Found 377 STRING physical interactions. #> Adjacency matrices constructed successfully. wadj_truth <- str_res$weighted adj_truth <- str_res$binary  # 4. Symmetrize and sort common <- intersect(rownames(adj_truth), colnames(adj_truth)) adj_truth <- adj_truth[common, common] adj_truth <- adj_truth[order(rownames(adj_truth)), order(colnames(adj_truth))]  # 5. Visualize network gtruth <- graph_from_adjacency_matrix(adj_truth, mode = \"undirected\") ggraph(gtruth, layout = \"fr\") +     geom_edge_link(color = \"gray\") +     geom_node_point(color = \"steelblue\") +     ggtitle(paste0(         \"Ground Truth: \",         vcount(gtruth),         \" nodes, \",         ecount(gtruth),         \" edges\"     )) +     theme_minimal()"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"simulating-zero-inflated-count-data","dir":"Articles","previous_headings":"","what":"2. Simulating Zero-Inflated Count Data","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"simulate three batches (n=50 cells ) count matrices follow ground-truth network topology dropout.","code":"# Simulation parameters nodes <- nrow(adj_truth) sims <- zinb_simdata(     n = 50,     p = nodes,     B = adj_truth,     mu_range = list(c(1, 4), c(1, 7), c(1, 10)),     mu_noise = c(1, 3, 5),     theta = c(1, 0.7, 0.5),     pi = c(0.2, 0.2, 0.2),     kmat = 3,     depth_range = c(0.8 * nodes * 3, 1.2 * nodes * 3) ) # Transpose to cells × genes count_matrices <- lapply(sims, t)  # Inspect sparsity sparsity <- sapply(count_matrices, function(mat) mean(mat == 0))"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"inferring-networks-with-jrf","dir":"Articles","previous_headings":"","what":"3. Inferring Networks with JRF","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"run Joint Random Forests across simulated batches infer shared batch-specific regulatory edges.","code":"networks_joint <- infer_networks(     count_matrices_list = count_matrices,     method = \"GENIE3\",     nCores = 10 ) # Weighted adjacency wadj_list <- generate_adjacency(networks_joint) # Symmetrize weights swadj_list <- symmetrize(wadj_list, weight_function = \"mean\")"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"roc-curve-and-auc","dir":"Articles","previous_headings":"","what":"4. ROC Curve and AUC","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"Plot ROC curve comparing continuous edge weights binary ground truth.","code":"roc_res <- plotROC(     swadj_list,     adj_truth,     plot_title = \"ROC Curve: JRF Joint Integration\",     is_binary = FALSE ) roc_res$plot auc_joint <- roc_res$auc"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"precisionrecall-and-graph-visualization","dir":"Articles","previous_headings":"4. ROC Curve and AUC","what":"4.1. Precision–Recall and Graph Visualization","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"Compute precision scores visualize binary networks.","code":"# Binary cutoff at 95th percentile binary_listj <- cutoff_adjacency(     count_matrices = count_matrices,     weighted_adjm_list = swadj_list,     n = 2,     method = \"GENIE3\",     quantile_threshold = 0.95,     nCores = 10,     debug = TRUE ) #> [Method: GENIE3] Matrix 1 → Cutoff = 0.01229 #> [Method: GENIE3] Matrix 2 → Cutoff = 0.01313 #> [Method: GENIE3] Matrix 3 → Cutoff = 0.01276  # Precision scores pscores_joint <- pscores(adj_truth, binary_listj) print(pscores_joint) #> $Statistics #>   Predicted_Matrix  TP    TN   FP  FN       TPR        FPR  Precision        F1 #> 1         Matrix 1 100 20128 1023 277 0.2652520 0.04836651 0.08904720 0.1333333 #> 2         Matrix 2 107 20168  983 270 0.2838196 0.04647534 0.09816514 0.1458759 #> 3         Matrix 3  77 20098 1053 300 0.2042440 0.04978488 0.06814159 0.1021898 #>          MCC #> 1 0.12794061 #> 2 0.14199808 #> 3 0.09084829 #>  #> $Radar #> $Radar$data #>                TPR        FPR  Precision        F1        MCC #> Max      0.5000000 0.50000000 0.50000000 0.5000000 0.50000000 #> Min      0.0000000 0.00000000 0.00000000 0.0000000 0.00000000 #> Matrix 1 0.2652520 0.04836651 0.08904720 0.1333333 0.12794061 #> Matrix 2 0.2838196 0.04647534 0.09816514 0.1458759 0.14199808 #> Matrix 3 0.2042440 0.04978488 0.06814159 0.1021898 0.09084829 #>  #> $Radar$plot  # Network plot title <- \"JRF Binary Networks\" plotg(binary_listj)"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"consensus-networks-and-community-similarity","dir":"Articles","previous_headings":"","what":"5. Consensus Networks and Community Similarity","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"Aggregate inferred binaries majority vote compare community structure ground truth.","code":"# Consensus matrix consensus <- create_consensus(binary_listj, method = \"vote\") plotg(list(consensus)) # Compare consensus to truth evaluate_consensus <- compare_consensus(     consensus_matrix = consensus,     reference_matrix = adj_truth,     false_plot = FALSE )  # Community detection comm_truth <- community_path(adj_truth) #> Detecting communities... #> Running pathway enrichment... #> 'select()' returned 1:1 mapping between keys and columns #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns comm_cons <- community_path(consensus) #> Detecting communities... #> Running pathway enrichment... #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns # Similarity sim_score <- community_similarity(comm_truth, list(comm_cons))"},{"path":"https://ngsFC.github.io/scGraphVerse/articles/simulation_study.html","id":"edge-mining","dir":"Articles","previous_headings":"5. Consensus Networks and Community Similarity","what":"5.1. Edge Mining","title":"scGraphVerse Case Study: Zero-Inflated Simulation and GRN Inference","text":"Identify true positive edges consensus network using edge mining.","code":"em <- edge_mining(list(consensus), adj_truth, query_edge_types = \"TP\") sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 20.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=it_IT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=it_IT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=it_IT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=it_IT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Rome #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] doRNG_1.8.6.2      rngtools_1.5.2     foreach_1.5.2      lubridate_1.9.4    #>  [5] forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4        purrr_1.0.4        #>  [9] readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       tidyverse_2.0.0    #> [13] ggraph_2.2.1       ggplot2_3.5.2      igraph_2.1.4       scGraphVerse_0.1.0 #> [17] BiocStyle_2.34.0   #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.40.1              R.methodsS3_1.8.2           #>   [3] gld_2.6.7                   goftest_1.2-3               #>   [5] Biostrings_2.74.1           vctrs_0.6.5                 #>   [7] ggtangle_0.0.6              spatstat.random_3.3-3       #>   [9] perturbR_0.1.3              proxy_0.4-27                #>  [11] digest_0.6.37               png_0.1-8                   #>  [13] Exact_3.3                   pcaPP_2.0-5                 #>  [15] ggrepel_0.9.6               deldir_2.0-4                #>  [17] parallelly_1.43.0           hdrcde_3.4                  #>  [19] MASS_7.3-54                 pkgdown_2.1.2               #>  [21] reshape2_1.4.4              httpuv_1.6.16               #>  [23] BiocGenerics_0.52.0         qvalue_2.38.0               #>  [25] withr_3.0.2                 xfun_0.52                   #>  [27] ggfun_0.1.8                 ggpubr_0.6.0                #>  [29] survival_3.2-11             memoise_2.0.1               #>  [31] clusterProfiler_4.14.6      gson_0.1.0                  #>  [33] systemfonts_1.2.2           networkD3_0.4.1             #>  [35] ragg_1.4.0                  tidytree_0.4.6              #>  [37] zoo_1.8-14                  gtools_3.9.5                #>  [39] pbapply_1.7-2               R.oo_1.27.0                 #>  [41] Formula_1.2-6               KEGGREST_1.46.0             #>  [43] promises_1.3.2              httr_1.4.7                  #>  [45] GENIE3_1.28.0               rstatix_0.7.2               #>  [47] globals_0.17.0              hash_2.2.6.3                #>  [49] fitdistrplus_1.2-2          fmsb_0.7.6                  #>  [51] rstudioapi_0.17.1           UCSC.utils_1.2.0            #>  [53] miniUI_0.1.2                generics_0.1.3              #>  [55] DOSE_4.0.1                  reactome.db_1.89.0          #>  [57] curl_6.2.2                  S4Vectors_0.44.0            #>  [59] zlibbioc_1.52.0             polyclip_1.10-7             #>  [61] GenomeInfoDbData_1.2.13     SparseArray_1.6.2           #>  [63] xtable_1.8-4                desc_1.4.3                  #>  [65] pracma_2.4.4                doParallel_1.0.17           #>  [67] evaluate_1.0.3              S4Arrays_1.6.0              #>  [69] hms_1.1.3                   GenomicRanges_1.58.0        #>  [71] bookdown_0.43               irlba_2.3.5.1               #>  [73] colorspace_2.1-1            ROCR_1.0-11                 #>  [75] readxl_1.4.5                reticulate_1.42.0           #>  [77] spatstat.data_3.1-6         magrittr_2.0.3              #>  [79] lmtest_0.9-40               later_1.4.2                 #>  [81] viridis_0.6.5               ggtree_3.14.0               #>  [83] lattice_0.20-44             spatstat.geom_3.3-6         #>  [85] future.apply_1.11.3         scattermore_1.2             #>  [87] XML_3.99-0.18               cowplot_1.1.3               #>  [89] matrixStats_1.5.0           RcppAnnoy_0.0.22            #>  [91] class_7.3-19                pillar_1.10.2               #>  [93] nlme_3.1-152                iterators_1.0.14            #>  [95] caTools_1.18.3              compiler_4.4.2              #>  [97] RSpectra_0.16-2             stringi_1.8.7               #>  [99] DescTools_0.99.60           tensor_1.5                  #> [101] SummarizedExperiment_1.36.0 plyr_1.8.9                  #> [103] fda_6.2.0                   crayon_1.5.3                #> [105] abind_1.4-8                 gridGraphics_0.5-1          #> [107] chron_2.3-62                haven_2.5.4                 #> [109] sp_2.2-0                    graphlayouts_1.2.2          #> [111] org.Hs.eg.db_3.20.0         bit_4.6.0                   #> [113] rootSolve_1.8.2.4           fastmatch_1.1-6             #> [115] codetools_0.2-18            textshaping_1.0.0           #> [117] bslib_0.9.0                 e1071_1.7-16                #> [119] lmom_3.2                    fds_1.8                     #> [121] plotly_4.10.4               mime_0.13                   #> [123] multinet_4.2.2              splines_4.4.2               #> [125] Rcpp_1.0.14                 fastDummies_1.7.5           #> [127] cellranger_1.1.0            datastructures_0.2.9        #> [129] knitr_1.50                  blob_1.2.4                  #> [131] robin_2.1.0                 fs_1.6.6                    #> [133] listenv_0.9.1               expm_1.0-0                  #> [135] ggsignif_0.6.4              ggplotify_0.1.2             #> [137] sqldf_0.4-11                Matrix_1.7-3                #> [139] tzdb_0.5.0                  tweenr_2.0.3                #> [141] pkgconfig_2.0.3             tools_4.4.2                 #> [143] cachem_1.1.0                RSQLite_2.3.9               #> [145] viridisLite_0.4.2           DBI_1.2.3                   #> [147] distributions3_0.2.2        graphite_1.52.0             #> [149] fastmap_1.2.0               rmarkdown_2.29              #> [151] scales_1.3.0                grid_4.4.2                  #> [153] ica_1.0-3                   Seurat_5.3.0                #> [155] broom_1.0.8                 sass_0.4.10                 #> [157] patchwork_1.3.0             INetTool_0.1.0              #> [159] BiocManager_1.30.25         dotCall64_1.2               #> [161] graph_1.84.1                carData_3.0-5               #> [163] RANN_2.6.2                  farver_2.1.2                #> [165] tidygraph_1.3.1             gsubfn_0.7                  #> [167] yaml_2.3.10                 deSolve_1.40                #> [169] MatrixGenerics_1.18.1       cli_3.6.5                   #> [171] stats4_4.4.2                lifecycle_1.0.4             #> [173] askpass_1.2.1               uwot_0.2.3                  #> [175] Biobase_2.66.0              rainbow_3.8                 #> [177] mvtnorm_1.3-3               backports_1.5.0             #> [179] BiocParallel_1.40.2         timechange_0.3.0            #> [181] gtable_0.3.6                ggridges_0.5.6              #> [183] progressr_0.15.1            parallel_4.4.2              #> [185] pROC_1.18.5                 ape_5.8-1                   #> [187] jsonlite_2.0.0              RcppHNSW_0.6.0              #> [189] bitops_1.0-9                bit64_4.6.0-1               #> [191] Rtsne_0.17                  yulab.utils_0.2.0           #> [193] ReactomePA_1.50.0           spatstat.utils_3.1-3        #> [195] SeuratObject_5.1.0          proto_1.0.0                 #> [197] jquerylib_0.1.4             GOSemSim_2.32.0             #> [199] spatstat.univar_3.1-2       R.utils_2.13.0              #> [201] lazyeval_0.2.2              shiny_1.10.0                #> [203] htmltools_0.5.8.1           enrichplot_1.26.6           #> [205] GO.db_3.20.0                sctransform_0.4.1           #> [207] data.tree_1.1.0             rappdirs_0.3.3              #> [209] glue_1.8.0                  STRINGdb_2.18.0             #> [211] spam_2.11-1                 XVector_0.46.0              #> [213] qpdf_1.3.5                  RCurl_1.98-1.17             #> [215] treeio_1.30.0               mclust_6.1.1                #> [217] ks_1.14.3                   gridExtra_2.3               #> [219] boot_1.3-28                 R6_2.6.1                    #> [221] fdatest_2.1.1               SingleCellExperiment_1.28.1 #> [223] gplots_3.2.0                labeling_0.4.3              #> [225] cluster_2.1.2               aplot_0.2.5                 #> [227] GenomeInfoDb_1.42.3         DelayedArray_0.32.0         #> [229] tidyselect_1.2.1            plotrix_3.8-4               #> [231] ggforce_0.4.2               car_3.1-3                   #> [233] AnnotationDbi_1.68.0        future_1.40.0               #> [235] munsell_0.5.1               KernSmooth_2.23-20          #> [237] data.table_1.17.0           htmlwidgets_1.6.4           #> [239] fgsea_1.32.4                RColorBrewer_1.1-3          #> [241] rlang_1.1.6                 spatstat.sparse_3.1-0       #> [243] spatstat.explore_3.4-2      rentrez_1.2.3"},{"path":"https://ngsFC.github.io/scGraphVerse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesco Cecere. Author, maintainer.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cecere F (2025). scGraphVerse: scGraphVerse: Gene Regulatory Network Analysis Package. R package version 0.1.0, https://github.com/francesco-cecere/scGraphVerse.","code":"@Manual{,   title = {scGraphVerse: scGraphVerse: A Gene Regulatory Network Analysis Package},   author = {Francesco Cecere},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/francesco-cecere/scGraphVerse}, }"},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"scgraphverse","dir":"","previous_headings":"","what":"scGraphVerse","title":"scGraphVerse","text":"scGraphVerse R package inferring, evaluating, visualizing gene regulatory networks (GRNs) single-cell RNA sequencing data. supports multiple GRN inference algorithms, consensus construction across methods datasets, performance evaluation, rich visualizations — optimized single-cell expression analysis.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"id_-features","dir":"","previous_headings":"","what":"✨ Features","title":"scGraphVerse","text":"GENIE3 (tree-based ensemble) GRNBoost2 (Python-based gradient boosting) ZILGM (zero-inflated Gaussian graphical model) PCzinb (partial correlation zero-inflated NB model) JRF (joint random forests multi-sample networks) 🎯 Network thresholding using shuffled matrix null models (cutoff_adjacency) 🧠 Consensus construction across methods using voting, union, INet 📊 Performance metrics: ROC, AUC, classification metrics, network topology 🧩 Network visualization using ggraph igraph","code":""},{"path":[]},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"development-version-github","dir":"","previous_headings":"🧪 Installation","what":"Development version (GitHub)","title":"scGraphVerse","text":"now, install development version directly GitHub:","code":"install.packages(\"devtools\") devtools::install_github(\"ngsFC/scGraphVerse\")"},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"id_-external-dependencies","dir":"","previous_headings":"","what":"📦 External Dependencies","title":"scGraphVerse","text":"inference methods used scGraphVerse require external packages available CRAN Bioconductor. must install manually:","code":"# GRNBoost2 (Python - arboreto) # Install using pip (run in your terminal, not R): pip install arboreto  # ZILGM (GitHub) remotes::install_github(\"bbeomjin/ZILGM\")  # PCzinb (GitHub) BiocManager::install(\"drisso/learn2count\")  # JRF (GitHub or archived CRAN) install.packages(   \"https://cran.r-project.org/src/contrib/Archive/JRF/JRF_0.1-4.tar.gz\",    repos = NULL,    type = \"source\" )  #INeet-Tool (GitHub) remotes::install_github(\"ValeriaPolicastro/INet-Tool\")"},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"id_-citation","dir":"","previous_headings":"","what":"📚 Citation","title":"scGraphVerse","text":"use scGraphVerse, please cite original GRN inference methods implements: Huynh-Thu VA, Irrthum , Wehenkel L, Geurts P. Inferring Regulatory Networks Expression Data Using Tree-Based Methods. PLOS ONE. 2010 Sep 28;5(9):e12776. Moerman T, Aibar Santos S, Bravo González-Blas C, Simm J, Moreau Y, Aerts J, et al. GRNBoost2 Arboreto: efficient scalable inference gene regulatory networks. Bioinformatics. 2019 Jun 15;35(12):2159–61. Park B, Choi H, Park C. Negative binomial graphical model excess zeros. Stat Anal Data Min ASA Data Sci J. 2021;14(5):449–65. Nguyen TKH, Berge K van den, Chiogna M, Risso D. Structure learning zero-inflated counts application single-cell RNA sequencing data. Ann Appl Stat. 2023 Sep;17(3):2555–73. Petralia F, Song WM, Tu Z, Wang P. New Method Joint Network Analysis Reveals Common Different Coexpression Patterns among Genes Proteins Breast Cancer. J Proteome Res. 2016 Mar 4;15(3):743–54.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"scGraphVerse","text":"work supported project: National Centre HPC, Big Data Quantum Computing Funded European Union – Next Generation EU – CN00000013 CUP: B93C22000620006","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Community Detection and Pathway Enrichment Analysis — community_path","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"Detects gene communities within adjacency network using one two community detection methods, performs pathway enrichment detected community.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"","code":"community_path(   adj_matrix,   methods = \"louvain\",   pathway_db = \"KEGG\",   genes_path = 5,   plot = TRUE,   verbose = TRUE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"adj_matrix square adjacency matrix. Row column names must correspond gene symbols. methods character vector one two community detection methods supported robin. two given, performance compared best selected. Default: \"louvain\". pathway_db Character string specifying pathway database use: \"KEGG\" \"Reactome\". Default: \"KEGG\". genes_path Integer. Minimum number genes per community run enrichment analysis. Default: 5. plot Logical. TRUE, generates plot detected communities. Default: TRUE. verbose Logical. TRUE, shows progress messages. Default: TRUE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"list elements: communities: List best_method named vector community membership per gene. pathways: List enrichment results per community (communities meeting size threshold). graph: igraph object community annotations.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"two methods provided, function uses robinCompare selects method higher AUC. Pathway enrichment done via clusterProfiler (KEGG) via ReactomePA (Reactome). Communities smaller genes_path excluded.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community Detection and Pathway Enrichment Analysis — community_path","text":"","code":"genes <- c(     \"TP53\",   \"BRCA1\", \"EGFR\",   \"MYC\",     \"CDKN1A\",     \"BCL2\",   \"MDM2\",  \"PTEN\",   \"AKT1\",    \"MAPK1\" )  adj <- matrix(     0,     nrow = length(genes),     ncol = length(genes),     dimnames = list(genes, genes) )  edge_list <- list(     c(\"TP53\", \"MDM2\"),     c(\"TP53\", \"CDKN1A\"),     c(\"BRCA1\", \"BCL2\"),     c(\"PTEN\", \"AKT1\"),     c(\"EGFR\", \"MAPK1\"),     c(\"MYC\", \"CDKN1A\"),     c(\"MYC\", \"BCL2\"),     c(\"AKT1\", \"MAPK1\") )  for (e in edge_list) {     adj[e[1], e[2]] <- 1     adj[e[2], e[1]] <- 1 }  diag(adj) <- 0 result <- community_path(     adj_matrix = adj,     methods    = \"louvain\",     pathway_db = \"KEGG\",     genes_path = 2,     plot       = TRUE,     verbose    = TRUE ) #> Detecting communities...  #> Running pathway enrichment... #> 'select()' returned 1:1 mapping between keys and columns #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Community Assignments and Topological Properties — community_similarity","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"Evaluates similarity ground truth community structure one predicted community structures. Computes community assignment metrics (VI, NMI, ARI) raw topological properties (Modularity, Number Communities, Density, Transitivity). Visualizes results via radar plot community assignment bar plots topology.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"","code":"community_similarity(control_output, predicted_list)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"control_output list output community_path() representing ground truth network. Must contain graph (igraph object) communities$membership. predicted_list list lists, output community_path() representing predicted networks compare.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"list containing: community_metrics: data frame VI, NMI, ARI scores prediction. topology_measures: data frame raw topological metrics prediction. control_topology: list raw topological metrics ground truth network.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"function requires igraph fmsb packages. Community similarity measured using variation information (VI), normalized mutual information (NMI), adjusted Rand index (ARI). Topological properties compared directly plotting raw values without normalization.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/community_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Community Assignments and Topological Properties — community_similarity","text":"","code":"genes <- c(     \"TP53\",   \"BRCA1\", \"EGFR\",   \"MYC\",     \"CDKN1A\",     \"BCL2\",   \"MDM2\",  \"PTEN\",   \"AKT1\",    \"MAPK1\" )  adj <- matrix(     0,     nrow = length(genes),     ncol = length(genes),     dimnames = list(genes, genes) )  edge_list <- list(     c(\"TP53\", \"MDM2\"),     c(\"TP53\", \"CDKN1A\"),     c(\"BRCA1\", \"BCL2\"),     c(\"PTEN\", \"AKT1\"),     c(\"EGFR\", \"MAPK1\"),     c(\"MYC\", \"CDKN1A\"),     c(\"MYC\", \"BCL2\"),     c(\"AKT1\", \"MAPK1\") )  for (e in edge_list) {     adj[e[1], e[2]] <- 1     adj[e[2], e[1]] <- 1 }  diag(adj) <- 0 control <- community_path(     adj_matrix = adj,     methods    = \"louvain\",     pathway_db = \"KEGG\",     genes_path = 2,     plot       = FALSE,     verbose    = FALSE ) #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns  pred1_adj <- adj pred1_adj[\"TP53\", \"MDM2\"] <- pred1_adj[\"MDM2\", \"TP53\"] <- 0  pred2_adj <- adj pred2_adj[\"MYC\", \"PTEN\"] <- pred2_adj[\"PTEN\", \"MYC\"] <- 1 pred1 <- community_path(     adj_matrix = pred1_adj,     methods = \"louvain\",     pathway_db = \"KEGG\",     genes_path = 2,     plot = FALSE,     verbose = FALSE ) #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns  pred2 <- community_path(     adj_matrix = pred2_adj,     methods    = \"louvain\",     pathway_db = \"KEGG\",     genes_path = 2,     plot       = FALSE,     verbose    = FALSE ) #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns #> 'select()' returned 1:1 mapping between keys and columns  comparison <- community_similarity(     control_output = control,     predicted_list = list(pred1, pred2) )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"Compares consensus adjacency matrix reference network, either provided manually generated STRINGdb. Visualizes True Positives (TP), False Negatives (FN), optionally False Positives (FP) edges.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"","code":"compare_consensus(   consensus_matrix,   reference_matrix = NULL,   false_plot = FALSE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"consensus_matrix binary square adjacency matrix representing consensus network. Row column names correspond gene symbols. reference_matrix Optional. binary square adjacency matrix representing reference (ground truth) network. NULL, STRINGdb high-confidence physical interaction network (human, score > 900) used. false_plot Logical. TRUE, additional plot False Positives (FP) generated. Default FALSE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"ggplot object visualizing comparison. false_plot = TRUE, combined plot True Positives / False Negatives False Positives returned.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"reference_matrix provided, function automatically queries STRINGdb generate high-confidence physical interaction network. plots differentiate: Confirmed Edges (TP CE): Present consensus reference. Missing Edges (FN ): Present reference absent consensus. Extra Edges (FP EE): Present consensus absent reference (false_plot = TRUE).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"Requires igraph, ggraph, patchwork, Matrix, STRINGdb packages.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/compare_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Consensus and Reference Graphs or STRINGdb Networks — compare_consensus","text":"","code":"set.seed(42)  # Simulate small example matrices original <- matrix(     sample(0:1, 25, replace = TRUE, prob = c(0.8, 0.2)),     5, 5 ) consensus <- matrix(     sample(0:1, 25, replace = TRUE, prob = c(0.8, 0.2)),     5, 5 ) diag(original) <- diag(consensus) <- 0 rownames(original) <- colnames(original) <- paste0(\"Gene\", 1:5) rownames(consensus) <- colnames(consensus) <- paste0(\"Gene\", 1:5)  # Compare consensus network to original network compare_consensus(     consensus,     reference_matrix = original,     false_plot       = TRUE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"Builds consensus adjacency matrix list networks using one three methods: \"vote\", \"union\", \"INet\".","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"","code":"create_consensus(   adj_matrix_list,   method = \"vote\",   weighted_list = NULL,   theta = 0.04,   threshold = 0.5,   ncores = 1 )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"adj_matrix_list list binary adjacency matrices (square, 0/1) identical dimensions matching row/column names. method Character string specifying consensus strategy. One : \"vote\" (default): edge included supported least threshold fraction matrices. \"union\": edge included present matrix. \"INet\": Combines normalized weighted matrices using consensusNet. weighted_list list weighted adjacency matrices (required method = \"INet\"). theta Numeric. Tuning parameter passed consensusNet (default: 0.04). threshold Numeric 0 1. Threshold \"vote\" \"INet\" methods. Default 0.5. ncores Integer. Number CPU cores use method = \"INet\". Default 1.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"square consensus adjacency matrix (binary weighted, depending method).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"Consensus construction depends selected method: vote Counts presence edge across matrices includes edges supported least threshold × N matrices. union Includes edge appears matrix. INet Multiplies binary matrices corresponding weighted matrices, normalizes results, applies consensusNet generate consensus network. \"INet\", binary weighted adjacency matrices must provided matching dimensions.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/create_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Consensus Adjacency Matrix from Multiple Networks — create_consensus","text":"","code":"mat1 <- matrix(sample(0:1, 25, replace = TRUE), nrow = 5) mat2 <- matrix(sample(0:1, 25, replace = TRUE), nrow = 5) rownames(mat1) <- colnames(mat1) <- paste0(\"Gene\", 1:5) rownames(mat2) <- colnames(mat2) <- paste0(\"Gene\", 1:5)  consensus_vote <- create_consensus(     list(mat1, mat2),     method    = \"vote\",     threshold = 0.5 )  consensus_union <- create_consensus(     list(mat1, mat2),     method = \"union\" )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"Applies cutoff weighted adjacency matrices using percentile estimated shuffled versions original expression matrices. Supports inference methods \"GENIE3\", \"GRNBoost2\", \"JRF\".","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"","code":"cutoff_adjacency(   count_matrices,   weighted_adjm_list,   n,   method = \"GENIE3\",   quantile_threshold = 0.99,   weight_function = \"mean\",   nCores = 1,   grnboost_modules = NULL,   debug = FALSE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"count_matrices list expression matrices (genes × cells) Seurat SingleCellExperiment objects. weighted_adjm_list list weighted adjacency matrices (one per expression matrix) threshold. n Integer. Number shuffled replicates generated per original expression matrix. method Character string. One \"GENIE3\", \"GRNBoost2\", \"JRF\". quantile_threshold Numeric. quantile used define cutoff. Default 0.99. weight_function Character string function used symmetrize adjacency matrices (\"mean\", \"max\", etc.). nCores Integer. Number CPU cores use parallelization. Default number workers current BiocParallel backend. grnboost_modules Python modules needed GRNBoost2 using reticulate. debug Logical. TRUE, prints detailed progress messages. Default FALSE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"list binary (thresholded) adjacency matrices, corresponding input weighted matrix.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"input expression matrix, n shuffled versions generated randomly permuting gene’s expression across cells. Network inference performed shuffled matrices, cutoff determined specified quantile (quantile_threshold) resulting edge weights. original weighted adjacency matrices thresholded using estimated cutoffs. Parallelization handled via BiocParallel. methods based : GENIE3: Random Forest-based inference (Huynh-Thu et al., 2010). GRNBoost2: Gradient boosting trees using arboreto (Moerman et al., 2019). JRF: Joint Random Forests across multiple conditions (Petralia et al., 2015).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/cutoff_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Threshold Adjacency Matrices Based on Shuffled Network Quantiles — cutoff_adjacency","text":"","code":"set.seed(123)  # Simulate two small expression matrices mat1 <- matrix(rpois(100, lambda = 5), nrow = 10, ncol = 10) mat2 <- matrix(rpois(100, lambda = 5), nrow = 10, ncol = 10) rownames(mat1) <- paste0(\"Gene\", 1:10) rownames(mat2) <- paste0(\"Gene\", 1:10)  # Infer networks using GENIE3 network_list <- infer_networks(     count_matrices_list = list(mat1, mat2),     method = \"GENIE3\",     nCores = 2 )  # Convert inferred networks into adjacency matrices list_wadj <- generate_adjacency(network_list) list_swadj <- symmetrize(     list_wadj,     weight_function = \"mean\" )  # Apply cutoff based on shuffled quantiles binary_adjm_list <- cutoff_adjacency(     count_matrices     = list(mat1, mat2),     weighted_adjm_list = list_swadj,     n                  = 2,     method             = \"GENIE3\",     quantile_threshold = 0.95,     nCores             = 2,     debug              = TRUE ) #> [Method: GENIE3] Matrix 1 → Cutoff = 0.24493 #> [Method: GENIE3] Matrix 2 → Cutoff = 0.23495  # Inspect one thresholded adjacency matrix binary_adjm_list[[1]] #>        Gene1 Gene10 Gene2 Gene3 Gene4 Gene5 Gene6 Gene7 Gene8 Gene9 #> Gene1      0      0     0     0     0     0     1     0     0     0 #> Gene10     0      0     0     0     0     0     0     0     0     0 #> Gene2      0      0     0     0     0     0     0     0     0     0 #> Gene3      0      0     0     0     0     0     0     0     0     0 #> Gene4      0      0     0     0     0     0     0     0     0     0 #> Gene5      0      0     0     0     0     0     0     0     0     0 #> Gene6      1      0     0     0     0     0     0     0     0     0 #> Gene7      0      0     0     0     0     0     0     0     0     0 #> Gene8      0      0     0     0     0     0     0     0     0     1 #> Gene9      0      0     0     0     0     0     0     0     1     0"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Load an RDS File from a URL — download_Atlas","title":"Download and Load an RDS File from a URL — download_Atlas","text":"Downloads RDS file specified URL reads contents R. used https://www.singlecellatlas.org","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Load an RDS File from a URL — download_Atlas","text":"","code":"download_Atlas(file_url)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Load an RDS File from a URL — download_Atlas","text":"file_url Character; URL RDS file download.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Load an RDS File from a URL — download_Atlas","text":"R object loaded downloaded RDS file.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Load an RDS File from a URL — download_Atlas","text":"function uses httr perform download. RDS file read directly raw connection without saving disk. internet connection required. download fails (e.g., invalid URL, server error), informative error message returned.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/download_Atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Load an RDS File from a URL — download_Atlas","text":"","code":"url <- paste0(     \"https://www.dropbox.com/s/r8qwsng79rhp9gf/\",     \"SCA_scRNASEQ_TISSUE_WHOLE_BLOOD.RDS?dl=1\" ) atlas_data <- download_Atlas(url)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify Cell Names and Combine Datasets — earlyj","title":"Modify Cell Names and Combine Datasets — earlyj","text":"Modifies cell identifiers element list matrices, Seurat objects, SingleCellExperiment objects appending unique matrix index (e.g., \"-m1\", \"-m2\", etc.). renaming, datasets merged single object.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify Cell Names and Combine Datasets — earlyj","text":"","code":"earlyj(input_list, rowg = TRUE)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify Cell Names and Combine Datasets — earlyj","text":"input_list list matrices, Seurat objects, SingleCellExperiment objects. elements must class. rowg Logical. TRUE (default), genes assumed rows cells columns. FALSE, matrices transposed renaming combining.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify Cell Names and Combine Datasets — earlyj","text":"combined matrix, Seurat object, SingleCellExperiment object modified (unique) cell names.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify Cell Names and Combine Datasets — earlyj","text":"matrices, function optionally transposes input combining. Seurat SingleCellExperiment objects, features (genes) common across input datasets retained merging. cell names suffixed \"-m1\", \"-m2\", etc., according original list position.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/earlyj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify Cell Names and Combine Datasets — earlyj","text":"","code":"# Example with matrices where genes are rows (default behavior) mat1 <- matrix(rpois(100, 5), nrow = 10, ncol = 10) mat2 <- matrix(rpois(100, 5), nrow = 10, ncol = 10) rownames(mat1) <- paste0(\"Gene\", 1:10) rownames(mat2) <- paste0(\"Gene\", 1:10)  combined_matrix <- earlyj(list(mat1, mat2))  # Example with matrices where genes are columns mat3 <- t(mat1) mat4 <- t(mat2)  combined_matrix2 <- earlyj(list(mat3, mat4), rowg = FALSE)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge Mining of Gene Interactions Using PubMed — edge_mining","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"Query PubMed literature evidence supporting predicted gene–gene interactions.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"","code":"edge_mining(   predicted_list,   ground_truth,   delay = 1,   query_field = \"Title/Abstract\",   query_edge_types = c(\"TP\", \"FP\", \"FN\"),   max_retries = 10,   BPPARAM = BiocParallel::bpparam() )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"predicted_list list predicted adjacency matrices (row column names gene symbols). ground_truth 0/1 adjacency matrix row column names. delay Numeric. Seconds wait consecutive queries (default = 1). query_field Character. PubMed search field. Options: \"Title/Abstract\" (default), \"Title\", \"Abstract\". query_edge_types Character vector. Edge types query: c(\"TP\", \"FP\", \"FN\") (default ). max_retries Integer. Max retries PubMed queries (default = 10). BPPARAM BiocParallel parameter object. Default = bpparam().","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"named list data.frames. data.frame columns: gene1 First gene interaction gene2 Second gene edge_type One \"TP\", \"FP\", \"FN\" pubmed_hits Number PubMed hits PMIDs Comma-separated PubMed IDs NA query_status One \"hits_found\", \"no_hits\", \"error\"","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"function compares predicted adjacency matrices ground truth matrix, identifies edge types (TP, FP, FN), queries PubMed gene pair. Returns counts hits, PMIDs, query status.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/edge_mining.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge Mining of Gene Interactions Using PubMed — edge_mining","text":"","code":"set.seed(123) predicted <- matrix(rbinom(100, 1, 0.1), nrow = 10) rownames(predicted) <- colnames(predicted) <-     paste0(\"Gene\", 1:10) ground_truth <- matrix(rbinom(100, 1, 0.05), nrow = 10) rownames(ground_truth) <- colnames(ground_truth) <-     paste0(\"Gene\", 1:10)  results <- edge_mining(     predicted_list = list(pred_net = predicted),     ground_truth = ground_truth ) head(results$pred_net) #>   gene1  gene2 edge_type pubmed_hits #> 1 Gene1  Gene2        FP          16 #> 2 Gene1  Gene4        FP           0 #> 3 Gene2  Gene4        FP           0 #> 4 Gene7  Gene9        FP           0 #> 5 Gene3 Gene10        FN           0 #>                                                                                                                                          PMIDs #> 1 38279496,35709900,33294693,29210166,27329801,24448204,20852103,18679149,16750900,15552041,12810866,12390896,10570058,8294771,8357829,3140236 #> 2                                                                                                                                         <NA> #> 3                                                                                                                                         <NA> #> 4                                                                                                                                         <NA> #> 5                                                                                                                                         <NA> #>   query_status #> 1   hits_found #> 2      no_hits #> 3      no_hits #> 4      no_hits #> 5      no_hits"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"Constructs adjacency matrices list data frames, representing weighted gene–gene interactions.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"","code":"generate_adjacency(df_list, nCores = 1)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"df_list list data frames. data frame must three columns: Gene1 Character. First gene interaction. Gene2 Character. Second gene interaction. Weight Numeric. Weight strength interaction Gene1 Gene2. nCores Integer. Number CPU cores use parallel processing. Defaults number available workers current BiocParallel backend.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"list square numeric adjacency matrices. matrix genes row column names, weights values. Diagonal entries set zero (self-interactions).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"function first identifies unique genes across data frames define matrix dimensions. interaction table, places corresponding weights appropriate gene-pair positions. Parallelization handled BiocParallel improved performance multiple datasets. Missing weights (NA) ignored construction. gene pairs matching global gene list inserted.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/generate_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Adjacency Matrices from Gene Interaction Tables — generate_adjacency","text":"","code":"# Create two simple interaction tables df1 <- data.frame(     Gene1 = c(\"GeneA\", \"GeneB\"),     Gene2 = c(\"GeneB\", \"GeneC\"),     Weight = c(0.5, 0.8) )  df2 <- data.frame(     Gene1 = c(\"GeneC\"),     Gene2 = c(\"GeneA\"),     Weight = 1.0 )  # Generate adjacency matrices adjacency_list <- generate_adjacency(list(df1, df2))  # View one of the matrices adjacency_list[[1]] #>       GeneA GeneB GeneC #> GeneA     0   0.5   0.0 #> GeneB     0   0.0   0.8 #> GeneC     0   0.0   0.0"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"Infers weighted gene regulatory networks (GRNs) one expression matrices using different inference methods: \"GENIE3\", \"GRNBoost2\", \"ZILGM\", \"JRF\", \"PCzinb\".","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"","code":"infer_networks(   count_matrices_list,   method = \"GENIE3\",   adjm = NULL,   nCores = 1,   grnboost_modules = NULL )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"count_matrices_list list expression matrices (genes × cells) Seurat SingleCellExperiment objects. method Character string. Inference method use. One : \"GENIE3\", \"GRNBoost2\", \"ZILGM\", \"JRF\", \"PCzinb\". adjm Optional. Reference adjacency matrix matching dimensions using \"ZILGM\" \"PCzinb\". nCores Integer. Number CPU cores use parallelization. Defaults number workers current BiocParallel backend. grnboost_modules Python modules required GRNBoost2 (created via reticulate).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"list inferred networks: \"GENIE3\", \"GRNBoost2\", \"ZILGM\", \"PCzinb\", list inferred network objects (edge lists adjacency matrices). \"JRF\", list data frames inferred edge lists condition dataset.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"expression matrix preprocessed automatically depending object type (Seurat, SingleCellExperiment, plain matrix). Parallelization behavior: GENIE3 ZILGM: external parallelization; internal nCores parameter controls computation. GRNBoost2 PCzinb: Parallelized across matrices using BiocParallel. JRF: Joint modeling matrices together; internal parallelization across random forest trees using doParallel. Methods based : GENIE3: Random Forest-based inference (Huynh-Thu et al., 2010). GRNBoost2: Gradient boosting trees using arboreto (Moerman et al., 2019). ZILGM: Zero-Inflated Graphical Models scRNA-seq (Zhang et al., 2021). JRF: Joint Random Forests across multiple conditions (Petralia et al., 2015). PCzinb: Pairwise correlation ZINB models (Li et al., 2020).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/infer_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer Gene Regulatory Networks from Expression Matrices — infer_networks","text":"","code":"set.seed(123)  # Simulate two small expression matrices mat1 <- matrix(rpois(100, lambda = 5), nrow = 10) mat2 <- matrix(rpois(100, lambda = 5), nrow = 10) rownames(mat1) <- paste0(\"Gene\", 1:10) rownames(mat2) <- paste0(\"Gene\", 1:10)  # Infer networks using GENIE3 networks <- infer_networks(     count_matrices_list = list(mat1, mat2),     method = \"GENIE3\",     nCores = 2 )  # Inspect first inferred network head(networks[[1]]) #>   regulatoryGene targetGene    weight #> 1          Gene8      Gene9 0.3979764 #> 2          Gene1      Gene6 0.3893773 #> 3          Gene6      Gene1 0.3744939 #> 4          Gene4      Gene2 0.2955326 #> 5          Gene7      Gene4 0.2517032 #> 6          Gene1      Gene3 0.2247287"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Python Environment for GRNBoost2 — init_py","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"Sets Python environment lazily loads modules required running GRNBoost2: arboreto, pandas, numpy.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"","code":"init_py(python_path = \"/usr/bin/python3\", required = TRUE)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"python_path Character string. Path Python executable, e.g., \"/usr/bin/python3\". required Logical. TRUE, errors Python available path invalid. Default: TRUE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"list three Python module objects: arboreto: GRNBoost2 algorithm module. pandas: Data handling module. numpy: Numerical operations module.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"Uses reticulate bind R specified Python interpreter lazily import modules needed GRNBoost2. module missing incompatible, informative error raised (required = TRUE).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/init_py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Python Environment for GRNBoost2 — init_py","text":"","code":"# Initialize Python environment (adjust python_path as needed) modules <- init_py() #> Python modules successfully loaded. # Use numpy to generate random numbers modules$numpy$random$rand(5) #> Error in py_call_impl(callable, call_args$unnamed, call_args$named): TypeError: 'float' object cannot be interpreted as an integer #> Run `reticulate::py_last_error()` for details."},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC Curves for Inferred Networks — plotROC","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"Computes visualizes Receiver Operating Characteristic (ROC) curves list predicted adjacency matrices compared binary ground truth network.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"","code":"plotROC(matrices_list, ground_truth, plot_title, is_binary = FALSE)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"matrices_list list square matrices representing predicted interactions. must share dimnames ground_truth; entries may binary (0/1) continuous weights. ground_truth square binary matrix indicating true interactions (1) upper triangle. Must match dims names element matrices_list. plot_title Character string. Title ROC plot. is_binary Logical. TRUE, treat matrices binary predictions. Default FALSE weighted predictions.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"list :auc: data frame AUC per matrix.plot: ROC plot (via ggplot2).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"binary matrices, single TPR/FPR point computed per matrix. weighted ones, full ROC curve computed continuous scores. Diagonals ignored; symmetry enforced.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC Curves for Inferred Networks — plotROC","text":"","code":"mat1 <- matrix(runif(100), nrow = 10) mat2 <- matrix(runif(100), nrow = 10) gt <- matrix(sample(c(0, 1), 100, TRUE), nrow = 10) diag(gt) <- 0 gt[lower.tri(gt)] <- 0 plotROC(     matrices_list = list(mat1, mat2),     ground_truth  = gt,     plot_title    = \"ROC for Network Inference\",     is_binary     = FALSE ) #> Error in roc.default(truth_vec, pred_vec, quiet = TRUE): Predictor must be numeric or ordered."},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Graphs from Adjacency Matrices — plotg","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"Generates arranges multiple graph visualizations list adjacency matrices. matrix converted undirected igraph object visualized using force-directed layout via ggraph.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"","code":"plotg(adj_matrix_list)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"adj_matrix_list list square, symmetric adjacency matrices zeros diagonal (self-loops). matrix represents undirected graph.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"grid plots displaying valid graphs input list.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"adjacency matrix validated ensure square symmetric. Disconnected nodes (degree zero) removed prior visualization. Graphs visualized force-directed layout using ggraph, multiple plots arranged grid gridExtra. subplot title includes graph index, number nodes, number edges.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"function requires following packages: igraph, ggraph, gridExtra. missing, informative error thrown.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/plotg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Graphs from Adjacency Matrices — plotg","text":"","code":"adj1 <- matrix(c(0, 1, 0, 1, 0, 1, 0, 1, 0), nrow = 3) adj2 <- matrix(c(0, 1, 1, 1, 0, 0, 1, 0, 0), nrow = 3) plotg(list(adj1, adj2))"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"Computes classification metrics comparing predicted adjacency matrices ground truth binary network visualizes performance via radar (spider) plot.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"","code":"pscores(ground_truth, predicted_list, zero_diag = TRUE)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"ground_truth square binary adjacency matrix representing ground truth network. Values must 0 1. upper triangle used evaluation. predicted_list list predicted adjacency matrices evaluate. matrix must dimensions row/column names ground_truth. zero_diag Logical. TRUE (default), sets diagonal ground_truth zero evaluation, removing self-loops.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"list one element:Statistics: Data frame evaluation metrics (TP, TN, FP, FN, TPR, FPR, Precision, F1, MCC) predicted matrix.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"predicted matrix, confusion matrix computed using upper triangle (non-self edges). Metrics including True Positive Rate (TPR), False Positive Rate (FPR), Precision, F1-score, Matthews Correlation Coefficient (MCC) calculated. radar plot automatically generated summarizing key scores across matrices.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"Requires fmsb, dplyr, tidyr packages.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/pscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Performance Scores for Predicted Adjacency Matrices — pscores","text":"","code":"# Simulate ground truth and predictions ground_truth <- matrix(     sample(0:1, 100, replace = TRUE),     nrow = 10 ) diag(ground_truth) <- 0 pred1 <- ground_truth pred2 <- matrix(     sample(0:1, 100, replace = TRUE),     nrow = 10 )  # Compute scores and generate radar plot result <- pscores(     ground_truth,     list(pred1, pred2) )  result$Statistics #>   Predicted_Matrix TP TN FP FN       TPR       FPR Precision        F1 #> 1         Matrix 1 26 19  0  0 1.0000000 0.0000000 1.0000000 1.0000000 #> 2         Matrix 2 14 10  9 12 0.5384615 0.4736842 0.6086957 0.5714286 #>          MCC #> 1 1.00000000 #> 2 0.06400461"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Top Expressed Genes from Single-Cell Data — selgene","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"Identifies returns top n highly expressed genes across cells within specific cell type. Supports objects class Seurat, SingleCellExperiment, numeric expression matrix (genes × cells).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"","code":"selgene(   object,   top_n,   cell_type = NULL,   cell_type_col = \"cell_type\",   assay = NULL,   remove_mt = FALSE,   remove_rib = FALSE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"object Seurat object, SingleCellExperiment object, numeric matrix (genes × cells). top_n Integer. Number top expressed genes return. cell_type Optional string. provided, filters expression matrix include cells type. cell_type_col Character. Name column metadata (Seurat meta.data SCE colData) containing cell type annotations. Default \"cell_type\". assay Character. SingleCellExperiment objects . Name assay use. NULL, defaults \"logcounts\". remove_mt Logical. TRUE, remove mitochondrial genes matching \"^MT-\" (case-insensitive). remove_rib Logical. TRUE, remove ribosomal genes matching \"^RP[SL]\" (case-insensitive).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"character vector top n highly expressed gene names.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"function assumes log-normalized values available \"data\" slot (Seurat objects) \"logcounts\" assay (SingleCellExperiment). raw counts provided matrix, transformation applied. Optional filtering available exclude mitochondrial genes (\"^MT-\") ribosomal genes (\"^RP[SL]\"), may otherwise dominate top expressed genes.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"using Seurat object, function retrieves log-normalized data default assay's \"data\" slot. SingleCellExperiment, uses specified assay (default \"logcounts\"). matrices, checks transformations applied, subsetting cell type supported. Mitochondrial ribosomal gene removal based regular expressions matching gene names. follow standard naming conventions (e.g., MT-ND1, RPL13A, RPS6).","code":""},{"path":[]},{"path":"https://ngsFC.github.io/scGraphVerse/reference/selgene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Top Expressed Genes from Single-Cell Data — selgene","text":"","code":"library(SingleCellExperiment) #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, saveRDS, setdiff, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians  expr_mat <- matrix(rnorm(1000, mean = 3), nrow = 100, ncol = 10) rownames(expr_mat) <- c(     paste0(\"MT-\", 1:5),     paste0(\"RPL\", 6:15),     paste0(\"Gene\", 16:100) ) colnames(expr_mat) <- paste0(\"Cell\", 1:10)  cell_md <- DataFrame(celltype = rep(c(\"A\", \"B\"), each = 5))  sce <- SingleCellExperiment(     assays   = list(logcounts = expr_mat),     colData  = cell_md )  top_genes <- selgene(     object         = sce,     top_n          = 10,     cell_type      = \"A\",     cell_type_col  = \"celltype\",     remove_mt      = TRUE,     remove_rib     = TRUE ) #> Using SCE assay 'logcounts' (log-normalized). #> Subsetted to 5 cells where celltype = 'A'. #> Removed mitochondrial genes matching '^MT-'. #> Removed ribosomal genes matching '^RP[SL]'. #> Top 10 genes selected based on mean expression."},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"Constructs weighted binary adj matrices physical protein-protein interactions using POST request STRING database API.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"","code":"stringdb_adjacency(   genes,   species = 9606,   required_score = 400,   keep_all_genes = TRUE,   verbose = TRUE )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"genes character vector gene symbols identifiers, e.g., c(\"TP53\", \"BRCA1\", ...). species Integer. NCBI taxonomy ID species. Default 9606 (human). required_score Integer 0,1000. Minimum confidence score interactions. Default 400. keep_all_genes Logical. TRUE (default), includes input genes final matrix even unmapped. verbose Logical. TRUE, displays progress messages. Default TRUE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"list containing: weighted: square numeric adjacency matrix scores weights. binary: corresponding binary (0/1) adjacency matrix.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"function: Maps input genes STRING internal IDs. Uses POST request retrieve physical protein-protein interactions STRING. Builds weighted adjacency matrix using STRING combined score. Builds binary adjacency matrix indicating presence/absence. Genes mapped STRING optionally retained zero rows/columns keep_all_genes = TRUE.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"Requires packages: STRINGdb, httr, jsonlite.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/stringdb_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Adjacency Matrices for Physical Interactions from STRING (POST API) — stringdb_adjacency","text":"","code":"large_gene_set <- c(\"TP53\", \"BRCA1\", \"MYC\", \"EGFR\", \"PTEN\") adjacency_list <- stringdb_adjacency(     genes = large_gene_set,     species = 9606,     required_score = 700 ) #> Initializing STRINGdb... #> Mapping genes to STRING IDs... #> Mapped 5 genes to STRING IDs. #> Retrieving physical interactions from STRING API... #> Found 1 STRING physical interactions. #> Adjacency matrices constructed successfully. weighted_mat <- adjacency_list$weighted binary_mat <- adjacency_list$binary"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetrize a List of Square Matrices — symmetrize","title":"Symmetrize a List of Square Matrices — symmetrize","text":"Symmetrizes square matrix list ensuring entries (, j) (j, ) identical, using specified combination function.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetrize a List of Square Matrices — symmetrize","text":"","code":"symmetrize(matrix_list, weight_function = \"mean\", nCores = 1)"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetrize a List of Square Matrices — symmetrize","text":"matrix_list list square numeric matrices symmetrize. weight_function Character string function. Method combine entries (, j) (j, ). Options include \"mean\", \"max\", \"min\", user-defined function. nCores Integer. Number CPU cores use parallel processing. Defaults number available workers current BiocParallel backend.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetrize a List of Square Matrices — symmetrize","text":"list symmetric matrices, matrix \\([, j] = [j, ]\\) \\(\\neq j\\).","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Symmetrize a List of Square Matrices — symmetrize","text":"pair -diagonal elements (, j) (j, ): one value zero, non-zero value used. non-zero, combined using specified weight_function. Diagonal entries preserved -modified. Parallelization managed via BiocParallel improved performance.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/symmetrize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetrize a List of Square Matrices — symmetrize","text":"","code":"mat1 <- matrix(c(0, 2, 3, 4), nrow = 2) mat2 <- matrix(c(0, 5, 6, 0), nrow = 2) matrix_list <- list(mat1, mat2)  sym_list <- symmetrize(     matrix_list,     weight_function = \"mean\" )  sym_list[[1]] #>      [,1] [,2] #> [1,]  0.0  2.5 #> [2,]  2.5  4.0"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"Simulates one count matrices following zero-inflated negative binomial (ZINB) distribution, incorporating gene-gene interaction structures cell-specific sequencing depth variation.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"","code":"zinb_simdata(   n,   p,   B,   mu_range,   mu_noise,   theta,   pi,   kmat = 1,   depth_range = NA )"},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"n Integer. Number cells (samples) simulated matrix. p Integer. Number genes (features) simulated matrix. B symmetric binary adjacency matrix (0/1) defining gene-gene connectivity. Row column names correspond gene names. mu_range List numeric vectors (length 2 ). Range gene expression means simulated matrix. mu_noise Numeric vector. Mean background noise matrix. theta Numeric vector. Dispersion parameters negative binomial distribution matrix. Smaller theta implies higher overdispersion. pi Numeric vector. Probability excess zeros (0 < pi < 1) matrix. kmat Integer. Number count matrices simulate. Default 1. depth_range Numeric vector length 2 NA. Range total sequencing depth per cell. NA, depth adjustment performed.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"list containing kmat matrices. matrix : Rows representing cells (cell_1, ..., cell_n). Columns representing genes (rownames(B)). Count values following ZINB distribution.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"simulated matrix: Generates gene expression values based ZINB model. Modulates expression using adjacency matrix B. Applies random sequencing depth scaling depth_range provided. Useful benchmarking single-cell RNA-seq network inference methods dropout events network structure.","code":""},{"path":"https://ngsFC.github.io/scGraphVerse/reference/zinb_simdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Zero-Inflated Negative Binomial (ZINB) Count Matrices with Sequencing Depth — zinb_simdata","text":"","code":"B <- matrix(0, nrow = 5, ncol = 5) rownames(B) <- colnames(B) <- paste0(\"Gene\", 1:5) B[1, 2] <- B[2, 3] <- B[4, 5] <- 1 B <- B + t(B) zinb_matrices <- zinb_simdata(     n = 100, p = 5, B = B,     mu_range = list(c(1, 5), c(2, 6)),     mu_noise = c(0.5, 0.7),     theta = c(1, 2),     pi = c(0.2, 0.3),     kmat = 2,     depth_range = c(500, 5000) ) print(zinb_matrices[[1]]) #>          Gene1 Gene2 Gene3 Gene4 Gene5 #> cell_1     700   280     0   140   140 #> cell_2       0   857  1999  1142   857 #> cell_3       0   465   116   697     0 #> cell_4     182   237    73    55    73 #> cell_5       0   448   448   448     0 #> cell_6     335   223     0    56   279 #> cell_7    1216   405     0  2026  1216 #> cell_8     106  1699   319  1274  1062 #> cell_9     304   708   708  1012   607 #> cell_10    262     0     0  2231   394 #> cell_11     67   267   100   267   400 #> cell_12    368   123   245   368   123 #> cell_13    330   412   495   247    82 #> cell_14    822  1028   822   617   617 #> cell_15    191   763  1145     0   954 #> cell_16    100     0   500   350   100 #> cell_17     55   165   385   551   771 #> cell_18    934   779   623     0   156 #> cell_19    134     0    67   268   234 #> cell_20   1199   600     0  1599     0 #> cell_21    657  1751  2189     0     0 #> cell_22    448  1121   448   673  1345 #> cell_23      0  2178   545   545  1089 #> cell_24    323  1293  1293   323   646 #> cell_25    199   798   399   399   399 #> cell_26    409   409  1228   819   819 #> cell_27      0   301   301  1202  1503 #> cell_28    173   520  1213   347  1213 #> cell_29    180   451   361   631   992 #> cell_30    236  1418  1182   945   473 #> cell_31    807   908   303  1110  1514 #> cell_32    347   397   496   595   297 #> cell_33      0   308   257   308  1283 #> cell_34      0   160    80   400   480 #> cell_35     96   305   241    32   128 #> cell_36    925   231   578   925   810 #> cell_37    195   160   160   195   195 #> cell_38   1548  1548     0   310     0 #> cell_39      0  1340   893   223   223 #> cell_40   2137   712   237   712   475 #> cell_41    347   347   278   347     0 #> cell_42    142    71   214   356   427 #> cell_43   1350  1350   386   386   386 #> cell_44   1064  1241   709   355     0 #> cell_45    181   723   181   181   542 #> cell_46    493     0   985     0   493 #> cell_47    446  1338   446  1338     0 #> cell_48   1131   905   679   905   226 #> cell_49    809   708  1213   809   202 #> cell_50    369   738  2398   553   369 #> cell_51     66   328   328   525   328 #> cell_52   1466  2053     0   293   293 #> cell_53     44   438   219   263   131 #> cell_54    140   245   140   245   420 #> cell_55      0   284   284     0   569 #> cell_56      0   331   331   331   372 #> cell_57    289  1155  1155   866  1010 #> cell_58    312   572    52   312   468 #> cell_59      0  1714   343   685   343 #> cell_60   1172  1758   146   293   146 #> cell_61    868   124    62  1364   372 #> cell_62    262   197   197   328   590 #> cell_63    140  1404   421   140   421 #> cell_64   1322   721     0   481   601 #> cell_65   1679   630   840   420     0 #> cell_66    825   550   275   275  2475 #> cell_67    329   658   987  1316   987 #> cell_68   1840  1380   460     0     0 #> cell_69   1230  1230   820   410   410 #> cell_70      0  2262     0  2262     0 #> cell_71      0   481  1924   481   481 #> cell_72    415   415   415   831   831 #> cell_73    157   471   157  1257   157 #> cell_74   1264   805   230   345   575 #> cell_75   1244  1244  1244   622     0 #> cell_76    145   218   435   290   145 #> cell_77      0     0  1016     0  2032 #> cell_78      0  3176     0     0   635 #> cell_79    362   181   181   724   543 #> cell_80    137   411   137     0     0 #> cell_81   1110   555   555  1665     0 #> cell_82    128   128   256   192   192 #> cell_83      0     0     0     0     0 #> cell_84      0  1695   847   847     0 #> cell_85     81   162   135   135   162 #> cell_86      0     0     0     0     0 #> cell_87    547  1094  1641   547   547 #> cell_88    284  2269   567   284     0 #> cell_89    419  2095     0     0     0 #> cell_90     94   235   281    94   235 #> cell_91    913     0     0  1141   228 #> cell_92      0     0  2798     0     0 #> cell_93    567   850   850   850   567 #> cell_94    235   469     0     0     0 #> cell_95      0     0     0  2387  2387 #> cell_96   1190  1190   397   397   397 #> cell_97    374  1122  1122  1496     0 #> cell_98    113   113   113   113   226 #> cell_99      0     0     0     0  3697 #> cell_100     0   806   806   806   806"}]
