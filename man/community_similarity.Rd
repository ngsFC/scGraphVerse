% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/community_similarity.R
\name{community_similarity}
\alias{community_similarity}
\title{Compare Community Assignments and Topological Properties}
\usage{
community_similarity(control_output, predicted_list)
}
\arguments{
\item{control_output}{A list output from \code{community_path()} representing the
ground truth network. Must contain a \code{graph} (igraph object) and
\code{communities$membership}.}

\item{predicted_list}{A list of lists, each output from \code{community_path()}
representing predicted networks to compare.}
}
\value{
A list containing:
\itemize{
\item \code{community_metrics}: A data frame with VI, NMI, and ARI
scores for each prediction.
\item \code{topology_measures}: A data frame with raw topological
metrics for each prediction.
\item \code{control_topology}: A list of raw topological metrics for
the ground truth network.
}
}
\description{
Evaluates similarity between a ground truth community structure and one
or more predicted community structures. Computes community assignment
metrics (VI, NMI, ARI) and raw topological properties (Modularity,
Number of Communities, Density, Transitivity). Visualizes results via a
radar plot for community assignment and bar plots for topology.
}
\details{
This function requires the \strong{igraph} and \strong{fmsb}
packages. Community similarity is measured using variation of
information (VI), normalized mutual information (NMI), and adjusted
Rand index (ARI). Topological properties are compared by directly
plotting raw values without normalization.
}
\examples{
data(count_matrices)
data(adj_truth)
networks <- infer_networks(
    count_matrices_list = count_matrices,
    method = "GENIE3",
    nCores = 1
)
head(networks[[1]])

wadj_list <- generate_adjacency(networks)
swadj_list <- symmetrize(wadj_list, weight_function = "mean")

binary_listj <- cutoff_adjacency(
    count_matrices = count_matrices,
    weighted_adjm_list = swadj_list,
    n = 2,
    method = "GENIE3",
    quantile_threshold = 0.95,
    nCores = 1,
    debug = TRUE
)
head(binary_listj[[1]])

consensus <- create_consensus(binary_listj, method = "vote")
comm_cons <- community_path(consensus)
comm_truth <- community_path(adj_truth)

sim_score <- community_similarity(comm_truth, list(comm_cons))
}
