% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_consensus.R
\name{create_consensus}
\alias{create_consensus}
\title{Create a Consensus Adjacency Matrix from Multiple Networks}
\usage{
create_consensus(
  adj_matrix_list,
  method = "vote",
  weighted_list = NULL,
  theta = 0.04,
  threshold = 0.5,
  ncores = 1
)
}
\arguments{
\item{adj_matrix_list}{A list of binary adjacency matrices (square,
0/1) with identical dimensions and matching row/column names.}

\item{method}{Character string specifying the consensus strategy. One of:
\itemize{
\item \code{"vote"} (default): An edge is included if supported
by at least \code{threshold} fraction of matrices.
\item \code{"union"}: An edge is included if present in any
matrix.
\item \code{"INet"}: Combines normalized weighted matrices using
\code{\link[INetTool]{consensusNet}}.
}}

\item{weighted_list}{A list of weighted adjacency matrices (required if
\code{method = "INet"}).}

\item{theta}{Numeric. Tuning parameter passed to \code{consensusNet}
(default: \code{0.04}).}

\item{threshold}{Numeric between 0 and 1. Threshold for "vote" and
"INet" methods. Default is \code{0.5}.}

\item{ncores}{Integer. Number of CPU cores to use when \code{method =
"INet"}. Default is \code{1}.}
}
\value{
A square consensus adjacency matrix (binary or weighted,
depending on the method).
}
\description{
Builds a consensus adjacency matrix from a list of networks using one
of three methods: \code{"vote"}, \code{"union"}, or \code{"INet"}.
}
\details{
Consensus construction depends on the selected method:
\describe{
\item{\strong{vote}}{Counts the presence of each edge across all
matrices and includes edges supported by at least
\code{threshold Ã— N} matrices.}
\item{\strong{union}}{Includes any edge that appears in any
matrix.}
\item{\strong{INet}}{Multiplies binary matrices by corresponding
weighted matrices, normalizes the results, and applies
\code{consensusNet} to generate a consensus network.}
}

For "INet", both binary and weighted adjacency matrices must be
provided with matching dimensions.
}
\examples{
data(count_matrices)

networks <- infer_networks(
    count_matrices_list = count_matrices,
    method = "GENIE3",
    nCores = 1
)
head(networks[[1]])

wadj_list <- generate_adjacency(networks)
swadj_list <- symmetrize(wadj_list, weight_function = "mean")

binary_listj <- cutoff_adjacency(
    count_matrices = count_matrices,
    weighted_adjm_list = swadj_list,
    n = 2,
    method = "GENIE3",
    quantile_threshold = 0.99,
    nCores = 1,
    debug = TRUE
)
head(binary_listj[[1]])

consensus <- create_consensus(binary_listj, method = "vote")
head(consensus)
}
