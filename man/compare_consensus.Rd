% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_consensus.R
\name{compare_consensus}
\alias{compare_consensus}
\title{Compare Consensus and Reference Graphs or STRINGdb Networks}
\usage{
compare_consensus(
  consensus_matrix,
  reference_matrix = NULL,
  false_plot = FALSE
)
}
\arguments{
\item{consensus_matrix}{A binary square adjacency matrix representing the
consensus network. Row and column names should correspond to gene
symbols.}

\item{reference_matrix}{Optional. A binary square adjacency matrix
representing the reference (ground truth) network. If \code{NULL}, a
STRINGdb high-confidence physical interaction network (human, score >
900) is used.}

\item{false_plot}{Logical. If \code{TRUE}, an additional plot of False
Positives (FP) is generated. Default is \code{FALSE}.}
}
\value{
A \code{ggplot} object visualizing the comparison. If
\code{false_plot = TRUE}, a combined plot of True Positives / False
Negatives and False Positives is returned.
}
\description{
Compares a consensus adjacency matrix to a reference network, either
provided manually or generated from STRINGdb. Visualizes True Positives
(TP), False Negatives (FN), and optionally False Positives (FP) edges.
}
\details{
If no \code{reference_matrix} is provided, the function
automatically queries STRINGdb to generate a high-confidence physical
interaction network.

The plots differentiate:
\itemize{
\item Confirmed Edges (TP or CE): Present in both consensus and
reference.
\item Missing Edges (FN or ME): Present in reference but absent in
consensus.
\item Extra Edges (FP or EE): Present in consensus but absent in
reference (only if \code{false_plot = TRUE}).
}
}
\note{
Requires the \pkg{igraph}, \pkg{ggraph}, \pkg{patchwork},
\pkg{Matrix}, and \pkg{STRINGdb} packages.
}
\examples{
data(count_matrices)
data(adj_truth)
networks <- infer_networks(
    count_matrices_list = count_matrices,
    method = "GENIE3",
    nCores = 15
)
head(networks[[1]])

wadj_list <- generate_adjacency(networks)
swadj_list <- symmetrize(wadj_list, weight_function = "mean")

binary_listj <- cutoff_adjacency(
    count_matrices = count_matrices,
    weighted_adjm_list = swadj_list,
    n = 2,
    method = "GENIE3",
    quantile_threshold = 0.99,
    nCores = 15,
    debug = TRUE
)
head(binary_listj[[1]])

consensus <- create_consensus(binary_listj, method = "vote")

compare_consensus(
    consensus,
    false_plot = TRUE
)

compare_consensus(
    consensus,
    reference_matrix = adj_truth,
    false_plot = TRUE
)

}
